{"version":3,"sources":["main.js"],"names":["resultsLoc","document","querySelector","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","countriesLoc","citiesLoc","sliderOne","getElementById","sliderTwo","displayValOne","displayValTwo","sliderTrack","recNumLoc","searchBtn","remoteLoc","relocationLoc","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","salaryMinDotLoc","salaryMaxDotLoc","searchInputLoc","clearFiltersLoc","clearFilterLoc","querySelectorAll","noResultsLoc","dropDownFilterLoc","dropDownLoc","dropDownBtnLoc","moreFiltersLoc","lessFiltersLoc","locationMarkLoc","locationSliderLoc","locationDotLoc","locationValuesLoc","displayValThree","apiPage","apiDataLength","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterMinSalary","filterMaxSalary","filterCountriesList","filterCitiesList","recordsNumber","isEmpty","filterObj","filterListMaxHeight","checked","disabled","addEventListener","e","target","classList","remove","add","getAPI","Promise","resolve","fetch","mode","headers","getAPIJSON","apiData","json","getAPIJSONLen","apiDataJSON","apiArray","apiArrayLen","length","getAPIPage","then","fetchObj","replaceChildren","showDataInHtml","filterHTML","innerText","parsedJobLocation","Object","keys","forEach","el","options","job_location","JSON","parse","console","log","findIndex","arr_el","branches","push","_forma_zatrudnienia","elem","job_type","advert","language","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","country","locality","branchesFiltr","indexOf","jobFormsFiltr","selectedJobFormsFiltr","jobTypesFiltr","langsFiltr","remoteFiltr","remote","relocationFiltr","_relokacja","salary","searchText","foundWord","position","values","value","field_id","toLowerCase","search","name","countriesFiltr","borderColorClass","textColorClass","_rekrutacja_rodzaj","formaZatrudnienia","insertAdjacentHTML","url","sort","a","b","localeCompare","rowHeight","style","height","String","min","max","slideOne","slideTwo","minGap","textContent","fillColor","percent1","percent2","background","getFilteredData","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","selectedBranches","Array","from","filter","selected","map","selectedJobForms","selectedJobTypes","selectedLang","selectedCountry","selectedValOne","selectedValTwo","selectedRemote","selectedRelocation","clearFilters","window","location","reload","slideThree","elemFiltr","previousElementSibling","elOpt","toggle","contains","maxHeight"],"mappings":"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","file":"all.min.js","sourcesContent":["const resultsLoc = document.querySelector(\".results\");\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\nconst countriesLoc = document.querySelector(\".countries\");\r\nconst citiesLoc = document.querySelector(\".cities\");\r\n\r\nconst sliderOne = document.getElementById(\"slider-1\");\r\nconst sliderTwo = document.getElementById(\"slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".salary .slider-track\");\r\n\r\nconst recNumLoc = document.querySelector(\".records-number\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\r\n    \".salary .slider-container .container\"\r\n);\r\nconst salaryValuesLoc = document.querySelector(\".salary .slider-values\");\r\nconst salaryMinDotLoc = document.querySelector(\"#slider-1\");\r\nconst salaryMaxDotLoc = document.querySelector(\"#slider-2\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst clearFilterLoc = document.querySelectorAll(\".lists .clear-list\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\n\r\nconst dropDownFilterLoc = document.querySelector(\".drop-down-filters\");\r\nconst dropDownLoc = document.querySelector(\".drop-down-btn\");\r\nconst dropDownBtnLoc = document.querySelector(\".drop-down-btn img\");\r\nconst moreFiltersLoc = document.querySelector(\".more-filters\");\r\nconst lessFiltersLoc = document.querySelector(\".less-filters\");\r\n\r\nconst locationMarkLoc = document.querySelector(\"#localization\");\r\nconst locationSliderLoc = document.querySelector(\r\n    \".distance-slider .slider-container .container\"\r\n);\r\nconst locationDotLoc = document.querySelector(\"#loc-slider\");\r\nconst locationValuesLoc = document.querySelector(\r\n    \".distance-slider .slider-values\"\r\n);\r\nconst displayValThree = document.getElementById(\"range3\");\r\n\r\nlet apiPage = 1;\r\nlet apiDataLength = 0;\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet filterCountriesList = [];\r\nlet filterCitiesList = [];\r\n\r\nlet recordsNumber = 0;\r\n\r\nlet isEmpty = true;\r\n\r\nlet filterObj = {};\r\n\r\nlet filterListMaxHeight = 0;\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsalaryMinDotLoc.disabled = true;\r\nsalaryMaxDotLoc.disabled = true;\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        salaryMinDotLoc.disabled = false;\r\n        salaryMaxDotLoc.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        salaryMinDotLoc.disabled = true;\r\n        salaryMaxDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\nconst getAPI = (apiPage) => {\r\n    return new Promise((resolve) => {\r\n        resolve(\r\n            fetch(\r\n                \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n                {\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"X-Request-Page-Size\": \"100\",\r\n                        \"X-Request-Current-Page\": apiPage,\r\n                        \"X-Request-Sort\":\r\n                            '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n                    },\r\n                }\r\n            )\r\n        );\r\n    });\r\n};\r\n\r\nconst getAPIJSON = (apiData) => {\r\n    return new Promise((resolve) => {\r\n        resolve(apiData.json());\r\n    });\r\n};\r\n\r\nconst getAPIJSONLen = (apiDataJSON) => {\r\n    return new Promise((resolve) => {\r\n        resolve({ apiArray: apiDataJSON, apiArrayLen: apiDataJSON.length });\r\n    });\r\n};\r\n\r\nconst getAPIPage = (apiPage, filterObj) => {\r\n    getAPI(apiPage)\r\n        .then((apiData) => {\r\n            return getAPIJSON(apiData);\r\n        })\r\n\r\n        .then((apiDataJSON) => {\r\n            return getAPIJSONLen(apiDataJSON);\r\n        })\r\n\r\n        .then((fetchObj) => {\r\n            apiDataLength = fetchObj.apiArrayLen;\r\n            if (apiDataLength > 0) {\r\n                if (apiPage === 1) {\r\n                    resultsLoc.replaceChildren();\r\n                    recordsNumber = 0;\r\n                }\r\n\r\n                showDataInHtml(fetchObj.apiArray, filterObj);\r\n            } else {\r\n                if (isEmpty) {\r\n                    filterHTML(\r\n                        filterBranchesList,\r\n                        filterJobFormList,\r\n                        filterJobTypeList,\r\n                        filterLangList,\r\n                        filterMinSalary,\r\n                        filterMaxSalary\r\n                    );\r\n                }\r\n                recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n                if (!recordsNumber) {\r\n                    noResultsLoc.classList.add(\"active\");\r\n                } else {\r\n                    noResultsLoc.classList.remove(\"active\");\r\n                }\r\n            }\r\n        });\r\n};\r\n\r\ngetAPIPage(apiPage, filterObj);\r\n\r\nconst showDataInHtml = (apiData, filterObj) => {\r\n    isEmpty = Object.keys(filterObj).length === 0;\r\n\r\n    let parsedJobLocation;\r\n\r\n    apiData.forEach(function (el) {\r\n        // convert specific location structure\r\n\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n            console.log(parsedJobLocation);\r\n        }\r\n\r\n        if (isEmpty) {\r\n            // branches filter create (1 - create Array) ///////////////////////////////////////////////////////    1\r\n\r\n            if (\r\n                filterBranchesList.findIndex(\r\n                    (arr_el) => arr_el === el.options.branches\r\n                ) === -1\r\n            ) {\r\n                filterBranchesList.push(el.options.branches);\r\n            }\r\n\r\n            // job form filter create\r\n            if (el.options._forma_zatrudnienia) {\r\n                el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                    if (\r\n                        filterJobFormList.findIndex(\r\n                            (arr_el) => arr_el === elem\r\n                        ) === -1\r\n                    ) {\r\n                        filterJobFormList.push(elem);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // job type filter create\r\n            if (\r\n                filterJobTypeList.findIndex(\r\n                    (arr_el) => arr_el === el.options.job_type\r\n                ) === -1\r\n            ) {\r\n                filterJobTypeList.push(el.options.job_type);\r\n            }\r\n\r\n            // lang filter create\r\n            if (\r\n                filterLangList.findIndex(\r\n                    (arr_el) => arr_el === el.advert.language\r\n                ) === -1\r\n            ) {\r\n                filterLangList.push(el.advert.language);\r\n            }\r\n\r\n            // salary filter create\r\n            if (parseInt(el.options._Widoczna_stawka)) {\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_od) <\r\n                    filterMinSalary\r\n                ) {\r\n                    filterMinSalary = el.options._spodziewane_wynagrodzenie_od;\r\n                }\r\n\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_do) >\r\n                    filterMaxSalary\r\n                ) {\r\n                    filterMaxSalary = el.options._spodziewane_wynagrodzenie_do;\r\n                }\r\n            }\r\n\r\n            // countries filter create\r\n            if (\r\n                filterCountriesList.findIndex(\r\n                    (arr_el) => arr_el === parsedJobLocation.country\r\n                ) === -1\r\n            ) {\r\n                filterCountriesList.push(parsedJobLocation.country);\r\n            }\r\n\r\n            // cities filter create\r\n            if (\r\n                filterCitiesList.findIndex(\r\n                    (arr_el) => arr_el === parsedJobLocation.locality\r\n                ) === -1\r\n            ) {\r\n                filterCitiesList.push(parsedJobLocation.locality);\r\n            }\r\n        } else {\r\n            // branches filter apply (4 - download only selected data) /////////////////////////////////////////////////////  4\r\n            if (filterObj.branchesFiltr.length) {\r\n                if (\r\n                    filterObj.branchesFiltr.indexOf(el.options.branches) === -1\r\n                ) {\r\n                    if (filterObj.branchesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // jobForm filter apply\r\n            if (filterObj.jobFormsFiltr.length) {\r\n                let selectedJobFormsFiltr = false;\r\n\r\n                if (el.options._forma_zatrudnienia) {\r\n                    el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                        if (filterObj.jobFormsFiltr.length) {\r\n                            if (filterObj.jobFormsFiltr.indexOf(elem) !== -1) {\r\n                                selectedJobFormsFiltr = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!selectedJobFormsFiltr) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // jobType filter apply\r\n            if (filterObj.jobTypesFiltr.length) {\r\n                if (\r\n                    filterObj.jobTypesFiltr.indexOf(el.options.job_type) === -1\r\n                ) {\r\n                    if (filterObj.jobTypesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // lang filter apply\r\n            if (filterObj.langsFiltr.length) {\r\n                if (filterObj.langsFiltr.indexOf(el.advert.language) === -1) {\r\n                    if (filterObj.langsFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // remote filter apply\r\n            if (filterObj.remoteFiltr) {\r\n                if (!el.options.remote) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // relocation filter apply\r\n            if (filterObj.relocationFiltr) {\r\n                if (!el.options._relokacja) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // salary filter apply\r\n            if (filterObj.salary[0] || filterObj.salary[1]) {\r\n                if (el.options._Widoczna_stawka == 1) {\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        !el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        !el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // search text apply\r\n            if (filterObj.searchText) {\r\n                let foundWord = false;\r\n                let position = -1;\r\n                el.advert.values.forEach(function (elem) {\r\n                    if (elem.value && elem.field_id !== \"geolocation\") {\r\n                        position = elem.value\r\n                            .toLowerCase()\r\n                            .search(filterObj.searchText.toLowerCase());\r\n                        if (position !== -1) {\r\n                            foundWord = true;\r\n                        }\r\n                    }\r\n                });\r\n                position = el.advert.name\r\n                    .toLowerCase()\r\n                    .search(filterObj.searchText.toLowerCase());\r\n                if (position !== -1) {\r\n                    foundWord = true;\r\n                }\r\n                if (!foundWord) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // countries filtr apply\r\n            if (filterObj.countriesFiltr.length) {\r\n                if (\r\n                    filterObj.countriesFiltr.indexOf(\r\n                        parsedJobLocation.country\r\n                    ) === -1\r\n                ) {\r\n                    if (parsedJobLocation.country) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // records number counting\r\n        recordsNumber++;\r\n\r\n        // colouring of records by type of recruitment\r\n\r\n        let borderColorClass = \"\";\r\n        let textColorClass = \"\";\r\n\r\n        if (el.options._rekrutacja_rodzaj === \"PT\") {\r\n            borderColorClass = \"pt-border\";\r\n            textColorClass = \"pt-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"RS\") {\r\n            borderColorClass = \"rs-border\";\r\n            textColorClass = \"rs-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"WEW\") {\r\n            borderColorClass = \"wew-border\";\r\n            textColorClass = \"wew-text\";\r\n        }\r\n\r\n        // creating HTML code for record\r\n\r\n        let formaZatrudnienia = \"\";\r\n\r\n        if (el.options._forma_zatrudnienia) {\r\n            el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n            });\r\n        }\r\n\r\n        resultsLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<a href=\"${\r\n                el.url\r\n            }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                    <div class=\"top-left\">\r\n                        <div class=\"lang\"><p>${el.advert.language}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                el.options.branches ? el.options.branches : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                el.advert.name\r\n            }</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"top-right\">\r\n                        ${\r\n                            el.options.job_type\r\n                                ? \"<div class='jobtype'>\" +\r\n                                  el.options.job_type +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._Widoczna_stawka\r\n                                ? el.options._spodziewane_wynagrodzenie_od &&\r\n                                  el.options._spodziewane_wynagrodzenie_do\r\n                                    ? \"<div class='salary'>\" +\r\n                                      el.options._spodziewane_wynagrodzenie_od +\r\n                                      \" - \" +\r\n                                      el.options._spodziewane_wynagrodzenie_do +\r\n                                      \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"bottom-left\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            parsedJobLocation.locality\r\n                        }</div>\r\n                        ${\r\n                            el.options.remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._relokacja\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                        <div class=\"bottom-right\">\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n        );\r\n    });\r\n\r\n    // download next 100 rekords from API\r\n    getAPIPage(++apiPage, filterObj);\r\n};\r\n\r\n// fullfill filters lists\r\nconst filterHTML = () =>\r\n    // filterBranchesList,\r\n    // filterJobFormList,\r\n    // filterJobTypeList,\r\n    // filterLangList,\r\n    // filterMinSalary,\r\n    // filterMaxSalary\r\n    {\r\n        // fullfill branches filters list (2 - fullfill lists in HTML) ///////////////////////////////////////////////////////   2\r\n        if (filterBranchesList.length > 0) {\r\n            filterBranchesList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterBranchesList.length * 21 + 3;\r\n            filterListMaxHeight = rowHeight;\r\n            branchesLoc.style.height = String(rowHeight) + \"px\";\r\n            filterBranchesList.forEach(function (el) {\r\n                branchesLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill jobforms filters list\r\n        if (filterJobFormList.length > 0) {\r\n            filterJobFormList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterJobFormList.length * 21 + 3;\r\n            jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n            filterJobFormList.forEach(function (el) {\r\n                jobFormLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill jobtypes filters list\r\n        if (filterJobTypeList.length > 0) {\r\n            filterJobTypeList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterJobTypeList.length * 21 + 3;\r\n            jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n            filterJobTypeList.forEach(function (el) {\r\n                jobTypeLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill langs filters list\r\n        if (filterLangList.length > 0) {\r\n            filterLangList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterLangList.length * 21 + 3;\r\n            langLoc.style.height = String(rowHeight) + \"px\";\r\n            filterLangList.forEach(function (el) {\r\n                langLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill countries filters list\r\n        if (filterCountriesList.length > 0) {\r\n            filterCountriesList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            filterCountriesList.forEach(function (el) {\r\n                if (countriesLoc.length === 0) {\r\n                    countriesLoc.insertAdjacentHTML(\r\n                        \"beforeend\",\r\n                        `<option value=\"\">Państwo</option><option value=\"${el}\">${el}</option>`\r\n                    );\r\n                } else {\r\n                    countriesLoc.insertAdjacentHTML(\r\n                        \"beforeend\",\r\n                        `<option value=\"${el}\">${el}</option>`\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // fullfill cities filters list\r\n        if (filterCitiesList.length > 0) {\r\n            filterCitiesList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            filterCitiesList.forEach(function (el) {\r\n                if (citiesLoc.length === 0) {\r\n                    citiesLoc.insertAdjacentHTML(\r\n                        \"beforeend\",\r\n                        `<option value=\"\">Miasto</option><option value=\"${el}\">${el}</option>`\r\n                    );\r\n                } else {\r\n                    citiesLoc.insertAdjacentHTML(\r\n                        \"beforeend\",\r\n                        `<option value=\"${el}\">${el}</option>`\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        sliderOne.value = filterMinSalary;\r\n        sliderTwo.value = filterMaxSalary;\r\n        sliderOne.min = filterMinSalary;\r\n        sliderTwo.min = filterMinSalary;\r\n        sliderOne.max = filterMaxSalary;\r\n        sliderTwo.max = filterMaxSalary;\r\n        slideOne();\r\n        slideTwo();\r\n    };\r\n\r\n// double range slider\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nslideOne();\r\nslideTwo();\r\n\r\nconst getFilteredData = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n\r\n    // create filter Object (3 - put selected options to Object) ///////////////////////////////////////////////////////   3\r\n\r\n    filterObj = {};\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedLang = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedCountry = [];\r\n    if (locationMarkLoc.checked) {\r\n        selectedCountry = Array.from(countriesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let selectedRemote = remoteLoc.checked;\r\n    let selectedRelocation = relocationLoc.checked;\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = displayValOne.innerText;\r\n        selectedValTwo = displayValTwo.innerText;\r\n    }\r\n\r\n    if (searchInputLoc.value !== \"\") {\r\n    }\r\n\r\n    filterObj.branchesFiltr = selectedBranches;\r\n    filterObj.jobFormsFiltr = selectedJobForms;\r\n    filterObj.jobTypesFiltr = selectedJobTypes;\r\n    filterObj.langsFiltr = selectedLang;\r\n    filterObj.remoteFiltr = selectedRemote;\r\n    filterObj.relocationFiltr = selectedRelocation;\r\n    filterObj.salary = [selectedValOne, selectedValTwo];\r\n    filterObj.searchText = searchInputLoc.value;\r\n    filterObj.countriesFiltr = selectedCountry;\r\n\r\n    // reset initialvalue\r\n    apiPage = 1;\r\n    apiDataLength = 0;\r\n    recordsNumber = 0;\r\n\r\n    getAPIPage(apiPage, filterObj);\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", getFilteredData);\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n\r\nclearFilterLoc.forEach((elemFiltr) => {\r\n    elemFiltr.addEventListener(\"click\", () => {\r\n        let optArray =\r\n            elemFiltr.previousElementSibling.querySelectorAll(\"option\");\r\n        optArray.forEach((elOpt) => {\r\n            if (elOpt.selected) {\r\n                elOpt.selected = false;\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\ndropDownLoc.addEventListener(\"click\", () => {\r\n    dropDownBtnLoc.classList.toggle(\"up\");\r\n    if (dropDownFilterLoc.classList.contains(\"show\")) {\r\n        dropDownFilterLoc.classList.remove(\"show\");\r\n        dropDownFilterLoc.style.maxHeight = String(0) + \"px\";\r\n        moreFiltersLoc.classList.remove(\"hide\");\r\n        lessFiltersLoc.classList.remove(\"show\");\r\n    } else {\r\n        dropDownFilterLoc.classList.add(\"show\");\r\n        dropDownFilterLoc.style.maxHeight =\r\n            String(filterListMaxHeight + 200) + \"px\";\r\n        moreFiltersLoc.classList.add(\"hide\");\r\n        lessFiltersLoc.classList.add(\"show\");\r\n    }\r\n});\r\n\r\nlocationMarkLoc.checked = false;\r\nlocationDotLoc.disabled = true;\r\ncountriesLoc.disabled = true;\r\ncitiesLoc.disabled = true;\r\n\r\nlocationMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        locationSliderLoc.classList.remove(\"unactive\");\r\n        locationValuesLoc.classList.remove(\"unactive\");\r\n        locationDotLoc.disabled = false;\r\n        countriesLoc.disabled = false;\r\n        citiesLoc.disabled = false;\r\n    } else {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n        countriesLoc.disabled = true;\r\n        citiesLoc.disabled = true;\r\n    }\r\n});\r\n\r\nfunction slideThree() {\r\n    displayValThree.textContent = locationDotLoc.value;\r\n}\r\n\r\nlocationDotLoc.value = 0;\r\n\r\ncountriesLoc.addEventListener(\"change\", function (e) {\r\n    console.log(countriesLoc.value);\r\n});\r\n"]}