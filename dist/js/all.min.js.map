{"version":3,"sources":["main.js"],"names":["resultsLoc","document","querySelector","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","sliderOne","getElementById","sliderTwo","displayValOne","displayValTwo","sliderTrack","recNumLoc","searchBtn","remoteLoc","relocationLoc","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","salaryMinDotLoc","salaryMaxDotLoc","searchInputLoc","clearFiltersLoc","noResultsLoc","apiPage","apiDataLength","filterBranchesList","filterJobFormList","filterjobTypeList","filterlangList","filterMinSalary","filterMaxSalary","recordsNumber","isEmpty","filterObj","checked","disabled","addEventListener","e","target","classList","remove","add","getAPI","Promise","resolve","fetch","mode","headers","getAPIJSON","apiData","json","getAPIJSONLen","apiDataJSON","apiArray","apiArrayLen","length","getAPIPage","then","fetchObj","replaceChildren","showDataInHtml","filterHTML","innerText","parsedJobLocation","Object","keys","forEach","el","findIndex","arr_el","options","branches","push","_forma_zatrudnienia","elem","job_type","advert","language","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","branchesFiltr","indexOf","jobFormsFiltr","selectedJobFormsFiltr","jobTypesFiltr","langsFiltr","remoteFiltr","remote","relocationFiltr","_relokacja","salary","searchText","foundWord","position","values","value","field_id","toLowerCase","search","name","job_location","JSON","parse","formaZatrudnienia","borderColorClass","textColorClass","_rekrutacja_rodzaj","insertAdjacentHTML","url","locality","sort","rowHeight","style","height","String","min","max","slideOne","slideTwo","minGap","textContent","fillColor","percent1","percent2","background","getFilteredData","branchesChildrenLoc","querySelectorAll","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","selectedValOne","selectedValTwo","selectedBranches","Array","from","filter","selected","map","selectedJobForms","selectedJobTypes","selectedLang","selectedRemote","selectedRelocation","clearFilters","window","location","reload"],"mappings":"AAAA,MAAAA,WAAAC,SAAAC,cAAA,YACAC,YAAAF,SAAAC,cAAA,aACAE,WAAAH,SAAAC,cAAA,aACAG,WAAAJ,SAAAC,cAAA,aACAI,QAAAL,SAAAC,cAAA,SAEAK,UAAAN,SAAAO,eAAA,YACAC,UAAAR,SAAAO,eAAA,YACAE,cAAAT,SAAAO,eAAA,UACAG,cAAAV,SAAAO,eAAA,UACAI,YAAAX,SAAAC,cAAA,iBAEAW,UAAAZ,SAAAC,cAAA,mBAEAY,UAAAb,SAAAC,cAAA,eAEAa,UAAAd,SAAAC,cAAA,WACAc,cAAAf,SAAAC,cAAA,eACAe,cAAAhB,SAAAC,cAAA,gBACAgB,gBAAAjB,SAAAC,cAAA,gCACAiB,gBAAAlB,SAAAC,cAAA,WACAkB,gBAAAnB,SAAAC,cAAA,aACAmB,gBAAApB,SAAAC,cAAA,aAEAoB,eAAArB,SAAAC,cAAA,uBAEAqB,gBAAAtB,SAAAC,cAAA,kBACAsB,aAAAvB,SAAAC,cAAA,eAEA,IAAAuB,QAAA,EACAC,cAAA,EAEAC,mBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,eAAA,GACAC,gBAAA,IACAC,gBAAA,EACAC,cAAA,EAEAC,SAAA,EAEAC,UAAA,GAEApB,UAAAqB,SAAA,EACApB,cAAAoB,SAAA,EAEAnB,cAAAmB,SAAA,EACAhB,gBAAAiB,UAAA,EACAhB,gBAAAgB,UAAA,EAEApB,cAAAqB,iBAAA,UAAA,SAAAC,GACAA,EAAAC,OAAAJ,SACAlB,gBAAAuB,UAAAC,OAAA,YACAvB,gBAAAsB,UAAAC,OAAA,YACAtB,gBAAAiB,UAAA,EACAhB,gBAAAgB,UAAA,IAEAnB,gBAAAuB,UAAAE,IAAA,YACAxB,gBAAAsB,UAAAE,IAAA,YACAvB,gBAAAiB,UAAA,EACAhB,gBAAAgB,UAAA,MAIA,MAAAO,OAAAnB,GACA,IAAAoB,SAAAC,IACAA,EACAC,MACA,8DACA,CACAC,KAAA,OACAC,QAAA,CACA,eAAA,mBACA,sBAAA,MACA,yBAAAxB,EACA,iBACA,+CAQAyB,WAAAC,GACA,IAAAN,SAAAC,IACAA,EAAAK,EAAAC,WAIAC,cAAAC,GACA,IAAAT,SAAAC,IACAA,EAAA,CAAAS,SAAAD,EAAAE,YAAAF,EAAAG,YAIAC,WAAA,CAAAjC,EAAAU,KACAS,OAAAnB,GACAkC,MAAAR,GACAD,WAAAC,KAGAQ,MAAAL,GACAD,cAAAC,KAGAK,MAAAC,IACAlC,cAAAkC,EAAAJ,YACA9B,cAAA,GACA,IAAAD,IACAzB,WAAA6D,kBAEA5B,cAAA,GAGA6B,eAAAF,EAAAL,SAAApB,KAEAD,SACA6B,WACApC,mBACAC,kBACAC,kBACAC,eACAC,gBACAC,iBAGAnB,UAAAmD,UAAA,cAAA/B,yBACAA,cAGAT,aAAAiB,UAAAC,OAAA,UAFAlB,aAAAiB,UAAAE,IAAA,eAQAe,WAAAjC,QAAAU,WAIA,MAAA2B,eAAA,CAAAX,EAAAhB,KAGA,IAAA8B,EAFA/B,QAAA,IAAAgC,OAAAC,KAAAhC,GAAAsB,OAIAN,EAAAiB,SAAA,SAAAC,GACA,GAAAnC,SAMA,IAFAP,mBAAA2C,WACAC,GAAAA,IAAAF,EAAAG,QAAAC,YAGA9C,mBAAA+C,KAAAL,EAAAG,QAAAC,UAIAJ,EAAAG,QAAAG,qBACAN,EAAAG,QAAAG,oBAAAP,SAAA,SAAAQ,IAIA,IAFAhD,kBAAA0C,WACAC,GAAAA,IAAAK,KAGAhD,kBAAA8C,KAAAE,OASA,IAFA/C,kBAAAyC,WACAC,GAAAA,IAAAF,EAAAG,QAAAK,YAGAhD,kBAAA6C,KAAAL,EAAAG,QAAAK,WAOA,IAFA/C,eAAAwC,WACAC,GAAAA,IAAAF,EAAAS,OAAAC,YAGAjD,eAAA4C,KAAAL,EAAAS,OAAAC,UAMAC,SAAAX,EAAAG,QAAAS,oBAEAD,SAAAX,EAAAG,QAAAU,+BACAnD,kBAEAA,gBAAAsC,EAAAG,QAAAU,+BAIAF,SAAAX,EAAAG,QAAAW,+BACAnD,kBAEAA,gBAAAqC,EAAAG,QAAAW,oCAGA,CAEA,GAAAhD,EAAAiD,cAAA3B,SAEA,IAAAtB,EAAAiD,cAAAC,QAAAhB,EAAAG,QAAAC,WAEAtC,EAAAiD,cAAA3B,OACA,OAAA,EAMA,GAAAtB,EAAAmD,cAAA7B,OAAA,CACA,IAAA8B,GAAA,EAEA,IAAAlB,EAAAG,QAAAG,oBAYA,OAAA,EAJA,GAPAN,EAAAG,QAAAG,oBAAAP,SAAA,SAAAQ,GACAzC,EAAAmD,cAAA7B,SACA,IAAAtB,EAAAmD,cAAAD,QAAAT,KACAW,GAAA,OAIAA,EACA,OAAA,EAQA,GAAApD,EAAAqD,cAAA/B,SAEA,IAAAtB,EAAAqD,cAAAH,QAAAhB,EAAAG,QAAAK,WAEA1C,EAAAqD,cAAA/B,OACA,OAAA,EAMA,GAAAtB,EAAAsD,WAAAhC,SACA,IAAAtB,EAAAsD,WAAAJ,QAAAhB,EAAAS,OAAAC,WACA5C,EAAAsD,WAAAhC,OACA,OAAA,EAMA,GAAAtB,EAAAuD,cACArB,EAAAG,QAAAmB,OACA,OAAA,EAKA,GAAAxD,EAAAyD,kBACAvB,EAAAG,QAAAqB,WACA,OAAA,EAKA,GAAA1D,EAAA2D,OAAA,IAAA3D,EAAA2D,OAAA,GAAA,CACA,GAAA,GAAAzB,EAAAG,QAAAS,iBAmDA,OAAA,EAlDA,GACAZ,EAAAG,QAAAU,+BACAb,EAAAG,QAAAW,8BACA,CACA,GACAhD,EAAA2D,OAAA,GACAzB,EAAAG,QAAAU,+BACA/C,EAAA2D,OAAA,GACAzB,EAAAG,QAAAU,8BAEA,OAAA,EAEA,GACA/C,EAAA2D,OAAA,GACAzB,EAAAG,QAAAW,+BACAhD,EAAA2D,OAAA,GACAzB,EAAAG,QAAAW,8BAEA,OAAA,EAIA,GACAd,EAAAG,QAAAU,gCACAb,EAAAG,QAAAW,+BAGAhD,EAAA2D,OAAA,GACAzB,EAAAG,QAAAU,+BACA/C,EAAA2D,OAAA,GACAzB,EAAAG,QAAAU,8BAEA,OAAA,EAIA,IACAb,EAAAG,QAAAU,+BACAb,EAAAG,QAAAW,+BAGAhD,EAAA2D,OAAA,GACAzB,EAAAG,QAAAW,+BACAhD,EAAA2D,OAAA,GACAzB,EAAAG,QAAAW,8BAEA,OAAA,EASA,GAAAhD,EAAA4D,WAAA,CACA,IAAAC,GAAA,EACAC,GAAA,EAiBA,GAhBA5B,EAAAS,OAAAoB,OAAA9B,SAAA,SAAAQ,GACAA,EAAAuB,OAAA,gBAAAvB,EAAAwB,WACAH,EAAArB,EAAAuB,MACAE,cACAC,OAAAnE,EAAA4D,WAAAM,gBACA,IAAAJ,IACAD,GAAA,OAIAC,EAAA5B,EAAAS,OAAAyB,KACAF,cACAC,OAAAnE,EAAA4D,WAAAM,gBACA,IAAAJ,IACAD,GAAA,IAEAA,EACA,OAAA,GAMA/D,gBAEAoC,EAAAG,QAAAgC,eACAvC,EAAAwC,KAAAC,MAAArC,EAAAG,QAAAgC,eAGA,IAAAG,EAAA,GAEAtC,EAAAG,QAAAG,qBACAN,EAAAG,QAAAG,oBAAAP,SAAA,SAAAQ,GACA+B,EAAAA,EAAA,MAAA/B,EAAA,UAMA,IAAAgC,EAAA,GACAC,EAAA,GAEA,OAAAxC,EAAAG,QAAAsC,qBACAF,EAAA,YACAC,EAAA,WAEA,OAAAxC,EAAAG,QAAAsC,qBACAF,EAAA,YACAC,EAAA,WAGA7G,WAAA+G,mBACA,YACA,YACA1C,EAAA2C,2CACAJ,oIAGAvC,EAAAS,OAAAC,4HAGAV,EAAAG,QAAAC,SAAAJ,EAAAG,QAAAC,SAAA,0DAEAoC,MACAxC,EAAAS,OAAAyB,gJAMAlC,EAAAG,QAAAK,SACA,wBACAR,EAAAG,QAAAK,SACA,SACA,+BAGAR,EAAAG,QAAAS,kBACAZ,EAAAG,QAAAU,+BACAb,EAAAG,QAAAW,8BACA,uBACAd,EAAAG,QAAAU,8BACA,MACAb,EAAAG,QAAAW,8BACA,SAEA,8NAQAlB,EAAAgD,2CAGA5C,EAAAG,QAAAmB,OACA,mCACA,+BAGAtB,EAAAG,QAAAqB,WACA,2CACA,+IAIAc,4HASAjD,aAAAjC,QAAAU,IAGA4B,WAAA,CACApC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEAL,EAAA8B,OAAA,IACA9B,EAAAuF,OACAC,UAAA,GAAAxF,EAAA8B,OAAA,EACAtD,YAAAiH,MAAAC,OAAAC,OAAAH,WAAA,KACAxF,EAAAyC,SAAA,SAAAC,GACAlE,YAAA4G,mBACA,YACA,kBAAA1C,MAAAA,kBAKAzC,EAAA6B,OAAA,IACA7B,EAAAsF,OACAC,UAAA,GAAAvF,EAAA6B,OAAA,EACArD,WAAAgH,MAAAC,OAAAC,OAAAH,WAAA,KACAvF,EAAAwC,SAAA,SAAAC,GACAjE,WAAA2G,mBACA,YACA,kBAAA1C,MAAAA,kBAKAxC,EAAA4B,OAAA,IACA5B,EAAAqF,OACAC,UAAA,GAAAtF,EAAA4B,OAAA,EACApD,WAAA+G,MAAAC,OAAAC,OAAAH,WAAA,KACAtF,EAAAuC,SAAA,SAAAC,GACAhE,WAAA0G,mBACA,YACA,kBAAA1C,MAAAA,kBAKAvC,EAAA2B,OAAA,IACA3B,EAAAoF,OACAC,UAAA,GAAArF,EAAA2B,OAAA,EACAnD,QAAA8G,MAAAC,OAAAC,OAAAH,WAAA,KACArF,EAAAsC,SAAA,SAAAC,GACA/D,QAAAyG,mBACA,YACA,kBAAA1C,MAAAA,kBAIA9D,UAAA4F,MAAApE,EACAtB,UAAA0F,MAAAnE,EACAzB,UAAAgH,IAAAxF,EACAtB,UAAA8G,IAAAxF,EACAxB,UAAAiH,IAAAxF,EACAvB,UAAA+G,IAAAxF,EACAyF,WACAC,YAKA,IAAAC,OAAA,EAEA,SAAAF,WACAzC,SAAAvE,UAAA0F,OAAAnB,SAAAzE,UAAA4F,QAAAwB,SACApH,UAAA4F,MAAAnB,SAAAvE,UAAA0F,OAAAwB,QAEAjH,cAAAkH,YAAArH,UAAA4F,MACA0B,YAGA,SAAAH,WACA1C,SAAAvE,UAAA0F,OAAAnB,SAAAzE,UAAA4F,QAAAwB,SACAlH,UAAA0F,MAAAnB,SAAAzE,UAAA4F,OAAAwB,QAEAhH,cAAAiH,YAAAnH,UAAA0F,MACA0B,YAGA,SAAAA,YACAC,UACAvH,UAAA4F,MAAA5F,UAAAgH,MAAAhH,UAAAiH,IAAAjH,UAAAgH,KACA,IACAQ,UACAtH,UAAA0F,MAAA5F,UAAAgH,MAAAhH,UAAAiH,IAAAjH,UAAAgH,KACA,IACA3G,YAAAwG,MAAAY,WAAA,qCAAAF,wBAAAA,wBAAAC,sBAAAA,aAGAN,WACAC,WAEA,MAAAO,gBAAA,KACA,MAAAC,EAAAjI,SAAAkI,iBAAA,oBACAC,EAAAnI,SAAAkI,iBAAA,oBACAE,EAAApI,SAAAkI,iBAAA,oBACAG,EAAArI,SAAAkI,iBAAA,gBAIAhG,UAAA,GAEA,IAmCAoG,EACAC,EApCAC,EAAAC,MAAAC,KAAAT,GACAU,QAAA,SAAAhE,GACA,OAAAA,EAAAiE,YAEAC,KAAA,SAAAlE,GACA,OAAAA,EAAAuB,SAGA4C,EAAAL,MAAAC,KAAAP,GACAQ,QAAA,SAAAhE,GACA,OAAAA,EAAAiE,YAEAC,KAAA,SAAAlE,GACA,OAAAA,EAAAuB,SAGA6C,EAAAN,MAAAC,KAAAN,GACAO,QAAA,SAAAhE,GACA,OAAAA,EAAAiE,YAEAC,KAAA,SAAAlE,GACA,OAAAA,EAAAuB,SAGA8C,EAAAP,MAAAC,KAAAL,GACAM,QAAA,SAAAhE,GACA,OAAAA,EAAAiE,YAEAC,KAAA,SAAAlE,GACA,OAAAA,EAAAuB,SAGA+C,EAAAnI,UAAAqB,QACA+G,EAAAnI,cAAAoB,QAIAnB,cAAAmB,UACAmG,EAAA7H,cAAAsD,UACAwE,EAAA7H,cAAAqD,WAGA1C,eAAA6E,MAGAhE,UAAAiD,cAAAqD,EACAtG,UAAAmD,cAAAyD,EACA5G,UAAAqD,cAAAwD,EACA7G,UAAAsD,WAAAwD,EACA9G,UAAAuD,YAAAwD,EACA/G,UAAAyD,gBAAAuD,EACAhH,UAAA2D,OAAA,CAAAyC,EAAAC,GACArG,UAAA4D,WAAAzE,eAAA6E,MAGA1E,QAAA,EACAC,cAAA,EACAO,cAAA,EAEAyB,WAAAjC,QAAAU,YAGArB,UAAAwB,iBAAA,QAAA2F,iBAEA,MAAAmB,aAAA,KACA9H,eAAA6E,MAAA,GACAkD,OAAAC,SAAAC,UAGAhI,gBAAAe,iBAAA,QAAA8G","file":"all.min.js","sourcesContent":["const resultsLoc = document.querySelector(\".results\");\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\n\r\nconst sliderOne = document.getElementById(\"slider-1\");\r\nconst sliderTwo = document.getElementById(\"slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".slider-track\");\r\n\r\nconst recNumLoc = document.querySelector(\".records-number\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\".slider-container .container\");\r\nconst salaryValuesLoc = document.querySelector(\".values\");\r\nconst salaryMinDotLoc = document.querySelector(\"#slider-1\");\r\nconst salaryMaxDotLoc = document.querySelector(\"#slider-2\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\n\r\nlet apiPage = 1;\r\nlet apiDataLength = 0;\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterjobTypeList = [];\r\nlet filterlangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet recordsNumber = 0;\r\n\r\nlet isEmpty = true;\r\n\r\nlet filterObj = {};\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsalaryMinDotLoc.disabled = true;\r\nsalaryMaxDotLoc.disabled = true;\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        salaryMinDotLoc.disabled = false;\r\n        salaryMaxDotLoc.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        salaryMinDotLoc.disabled = true;\r\n        salaryMaxDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\nconst getAPI = (apiPage) => {\r\n    return new Promise((resolve) => {\r\n        resolve(\r\n            fetch(\r\n                \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n                {\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"X-Request-Page-Size\": \"100\",\r\n                        \"X-Request-Current-Page\": apiPage,\r\n                        \"X-Request-Sort\":\r\n                            '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n                    },\r\n                }\r\n            )\r\n        );\r\n    });\r\n};\r\n\r\nconst getAPIJSON = (apiData) => {\r\n    return new Promise((resolve) => {\r\n        resolve(apiData.json());\r\n    });\r\n};\r\n\r\nconst getAPIJSONLen = (apiDataJSON) => {\r\n    return new Promise((resolve) => {\r\n        resolve({ apiArray: apiDataJSON, apiArrayLen: apiDataJSON.length });\r\n    });\r\n};\r\n\r\nconst getAPIPage = (apiPage, filterObj) => {\r\n    getAPI(apiPage)\r\n        .then((apiData) => {\r\n            return getAPIJSON(apiData);\r\n        })\r\n\r\n        .then((apiDataJSON) => {\r\n            return getAPIJSONLen(apiDataJSON);\r\n        })\r\n\r\n        .then((fetchObj) => {\r\n            apiDataLength = fetchObj.apiArrayLen;\r\n            if (apiDataLength > 0) {\r\n                if (apiPage === 1) {\r\n                    resultsLoc.replaceChildren();\r\n                    // recNumLoc.replaceChildren();\r\n                    recordsNumber = 0;\r\n                }\r\n\r\n                showDataInHtml(fetchObj.apiArray, filterObj);\r\n            } else {\r\n                if (isEmpty) {\r\n                    filterHTML(\r\n                        filterBranchesList,\r\n                        filterJobFormList,\r\n                        filterjobTypeList,\r\n                        filterlangList,\r\n                        filterMinSalary,\r\n                        filterMaxSalary\r\n                    );\r\n                }\r\n                recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n                if (!recordsNumber) {\r\n                    noResultsLoc.classList.add(\"active\");\r\n                } else {\r\n                    noResultsLoc.classList.remove(\"active\");\r\n                }\r\n            }\r\n        });\r\n};\r\n\r\ngetAPIPage(apiPage, filterObj);\r\n\r\n// recordsNumber = 0;\r\n\r\nconst showDataInHtml = (apiData, filterObj) => {\r\n    isEmpty = Object.keys(filterObj).length === 0;\r\n\r\n    let parsedJobLocation;\r\n\r\n    apiData.forEach(function (el) {\r\n        if (isEmpty) {\r\n            // branches filter\r\n\r\n            if (\r\n                filterBranchesList.findIndex(\r\n                    (arr_el) => arr_el === el.options.branches\r\n                ) === -1\r\n            ) {\r\n                filterBranchesList.push(el.options.branches);\r\n            }\r\n\r\n            // job form filter\r\n            if (el.options._forma_zatrudnienia) {\r\n                el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                    if (\r\n                        filterJobFormList.findIndex(\r\n                            (arr_el) => arr_el === elem\r\n                        ) === -1\r\n                    ) {\r\n                        filterJobFormList.push(elem);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // job type filter\r\n            if (\r\n                filterjobTypeList.findIndex(\r\n                    (arr_el) => arr_el === el.options.job_type\r\n                ) === -1\r\n            ) {\r\n                filterjobTypeList.push(el.options.job_type);\r\n            }\r\n\r\n            // lang filter\r\n            if (\r\n                filterlangList.findIndex(\r\n                    (arr_el) => arr_el === el.advert.language\r\n                ) === -1\r\n            ) {\r\n                filterlangList.push(el.advert.language);\r\n            }\r\n\r\n            //\r\n\r\n            // salary filter\r\n            if (parseInt(el.options._Widoczna_stawka)) {\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_od) <\r\n                    filterMinSalary\r\n                ) {\r\n                    filterMinSalary = el.options._spodziewane_wynagrodzenie_od;\r\n                }\r\n\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_do) >\r\n                    filterMaxSalary\r\n                ) {\r\n                    filterMaxSalary = el.options._spodziewane_wynagrodzenie_do;\r\n                }\r\n            }\r\n        } else {\r\n            // activate branche filter\r\n            if (filterObj.branchesFiltr.length) {\r\n                if (\r\n                    filterObj.branchesFiltr.indexOf(el.options.branches) === -1\r\n                ) {\r\n                    if (filterObj.branchesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // activate jobForm filter\r\n            if (filterObj.jobFormsFiltr.length) {\r\n                let selectedJobFormsFiltr = false;\r\n\r\n                if (el.options._forma_zatrudnienia) {\r\n                    el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                        if (filterObj.jobFormsFiltr.length) {\r\n                            if (filterObj.jobFormsFiltr.indexOf(elem) !== -1) {\r\n                                selectedJobFormsFiltr = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!selectedJobFormsFiltr) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // activate jobType filter\r\n            if (filterObj.jobTypesFiltr.length) {\r\n                if (\r\n                    filterObj.jobTypesFiltr.indexOf(el.options.job_type) === -1\r\n                ) {\r\n                    if (filterObj.jobTypesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // activate lang filter\r\n            if (filterObj.langsFiltr.length) {\r\n                if (filterObj.langsFiltr.indexOf(el.advert.language) === -1) {\r\n                    if (filterObj.langsFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // activate remote filter\r\n            if (filterObj.remoteFiltr) {\r\n                if (!el.options.remote) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // activate relocation filter\r\n            if (filterObj.relocationFiltr) {\r\n                if (!el.options._relokacja) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // activate salary filter\r\n            if (filterObj.salary[0] || filterObj.salary[1]) {\r\n                if (el.options._Widoczna_stawka == 1) {\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        !el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        !el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // search text\r\n            if (filterObj.searchText) {\r\n                let foundWord = false;\r\n                let position = -1;\r\n                el.advert.values.forEach(function (elem) {\r\n                    if (elem.value && elem.field_id !== \"geolocation\") {\r\n                        position = elem.value\r\n                            .toLowerCase()\r\n                            .search(filterObj.searchText.toLowerCase());\r\n                        if (position !== -1) {\r\n                            foundWord = true;\r\n                        }\r\n                    }\r\n                });\r\n                position = el.advert.name\r\n                    .toLowerCase()\r\n                    .search(filterObj.searchText.toLowerCase());\r\n                if (position !== -1) {\r\n                    foundWord = true;\r\n                }\r\n                if (!foundWord) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // records\r\n        recordsNumber++;\r\n\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        let formaZatrudnienia = \"\";\r\n\r\n        if (el.options._forma_zatrudnienia) {\r\n            el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n            });\r\n        }\r\n\r\n        // record Color\r\n\r\n        let borderColorClass = \"\";\r\n        let textColorClass = \"\";\r\n\r\n        if (el.options._rekrutacja_rodzaj === \"PT\") {\r\n            borderColorClass = \"pt-border\";\r\n            textColorClass = \"pt-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"RS\") {\r\n            borderColorClass = \"rs-border\";\r\n            textColorClass = \"rs-text\";\r\n        }\r\n\r\n        resultsLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<a href=\"${\r\n                el.url\r\n            }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                    <div class=\"top-left\">\r\n                        <div class=\"lang\"><p>${el.advert.language}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                el.options.branches ? el.options.branches : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                el.advert.name\r\n            }</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"top-right\">\r\n                        ${\r\n                            el.options.job_type\r\n                                ? \"<div class='jobtype'>\" +\r\n                                  el.options.job_type +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._Widoczna_stawka\r\n                                ? el.options._spodziewane_wynagrodzenie_od &&\r\n                                  el.options._spodziewane_wynagrodzenie_do\r\n                                    ? \"<div class='salary'>\" +\r\n                                      el.options._spodziewane_wynagrodzenie_od +\r\n                                      \" - \" +\r\n                                      el.options._spodziewane_wynagrodzenie_do +\r\n                                      \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"bottom-left\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            parsedJobLocation.locality\r\n                        }</div>\r\n                        ${\r\n                            el.options.remote\r\n                                ? \"<div class='remote'>remote</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._relokacja\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                        <div class=\"bottom-right\">\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n        );\r\n    });\r\n\r\n    getAPIPage(++apiPage, filterObj);\r\n};\r\n\r\nconst filterHTML = (\r\n    filterBranchesList,\r\n    filterJobFormList,\r\n    filterjobTypeList,\r\n    filterlangList,\r\n    filterMinSalary,\r\n    filterMaxSalary\r\n) => {\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort();\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort();\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterjobTypeList.length > 0) {\r\n        filterjobTypeList.sort();\r\n        rowHeight = filterjobTypeList.length * 21 + 3;\r\n        jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        filterjobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterlangList.length > 0) {\r\n        filterlangList.sort();\r\n        rowHeight = filterlangList.length * 21 + 3;\r\n        langLoc.style.height = String(rowHeight) + \"px\";\r\n        filterlangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n    sliderOne.value = filterMinSalary;\r\n    sliderTwo.value = filterMaxSalary;\r\n    sliderOne.min = filterMinSalary;\r\n    sliderTwo.min = filterMinSalary;\r\n    sliderOne.max = filterMaxSalary;\r\n    sliderTwo.max = filterMaxSalary;\r\n    slideOne();\r\n    slideTwo();\r\n};\r\n\r\n// double range slider\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nslideOne();\r\nslideTwo();\r\n\r\nconst getFilteredData = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n\r\n    // create filter Obj\r\n\r\n    filterObj = {};\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedLang = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedRemote = remoteLoc.checked;\r\n    let selectedRelocation = relocationLoc.checked;\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = displayValOne.innerText;\r\n        selectedValTwo = displayValTwo.innerText;\r\n    }\r\n\r\n    if (searchInputLoc.value !== \"\") {\r\n    }\r\n\r\n    filterObj.branchesFiltr = selectedBranches;\r\n    filterObj.jobFormsFiltr = selectedJobForms;\r\n    filterObj.jobTypesFiltr = selectedJobTypes;\r\n    filterObj.langsFiltr = selectedLang;\r\n    filterObj.remoteFiltr = selectedRemote;\r\n    filterObj.relocationFiltr = selectedRelocation;\r\n    filterObj.salary = [selectedValOne, selectedValTwo];\r\n    filterObj.searchText = searchInputLoc.value;\r\n\r\n    // reset initialvalue\r\n    apiPage = 1;\r\n    apiDataLength = 0;\r\n    recordsNumber = 0;\r\n\r\n    getAPIPage(apiPage, filterObj);\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", getFilteredData);\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n"]}