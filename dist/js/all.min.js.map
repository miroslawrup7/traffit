{"version":3,"sources":["main.js"],"names":["resultsLoc","document","querySelector","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","countriesLoc","citiesLoc","sliderOne","getElementById","sliderTwo","displayValOne","displayValTwo","sliderTrack","pauseLoc","recNumLoc","searchBtn","remoteLoc","relocationLoc","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","salaryMinDotLoc","salaryMaxDotLoc","searchInputLoc","clearFiltersLoc","clearFilterLoc","querySelectorAll","noResultsLoc","dropDownFilterLoc","dropDownLoc","dropDownBtnLoc","moreFiltersLoc","lessFiltersLoc","locationMarkLoc","locationSliderLoc","locationDotLoc","locationValuesLoc","displayValThree","recordsOnPageLoc","pagesContainerLoc","pageButtonsLoc","apiPage","recordsOnPage","apiDataLength","i","k","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterMinSalary","filterMaxSalary","filterCountriesList","recordsNumber","isEmpty","filterObj","filterListMaxHeight","allowSetPages","checked","disabled","addEventListener","e","target","classList","remove","add","getAPI","Promise","resolve","fetch","mode","headers","getAPIJSON","apiData","json","getAPIJSONLen","apiDataJSON","apiArray","apiArrayLen","length","getAPIPage","then","fetchObj","replaceChildren","showDataInHtml","compare","a","b","city","localeCompare","filterHTML","innerText","setPages","key","sort","parsedJobLocation","Object","keys","forEach","el","console","log","options","job_location","JSON","parse","findIndex","arr_el","branches","push","_forma_zatrudnienia","elem","job_type","advert","language","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","country","locality","lati","parseFloat","latitude","longi","longitude","branchesFiltr","indexOf","jobFormsFiltr","selectedJobFormsFiltr","jobTypesFiltr","langsFiltr","remoteFiltr","remote","relocationFiltr","_relokacja","salary","searchText","foundWord","position","values","value","field_id","toLowerCase","search","name","countriesFiltr","citiesFiltr","km","distanceFiltr","min_lati","latiFiltr","max_lati","min_longi","longiFiltr","Math","cos","PI","max_longi","borderColorClass","textColorClass","_rekrutacja_rodzaj","formaZatrudnienia","insertAdjacentHTML","url","rowHeight","style","height","String","filterCountriesListSorted","reduce","accumulator","newAllCitiesObj","klucz","concat","newAllCitiesArray","min","max","slideOne","slideTwo","minGap","textContent","fillColor","percent1","percent2","background","getFilteredData","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","citiesChildrenLoc","selectedBranches","Array","from","filter","selected","map","selectedJobForms","selectedJobTypes","selectedLang","selectedCountry","selectedLati","selectedLongi","selectedCity","find","selectedDistance","selectedValOne","selectedValTwo","selectedRemote","selectedRelocation","clearFilters","window","location","reload","slideThree","elemFiltr","previousElementSibling","elOpt","toggle","contains","maxHeight","activateCities","sel_el","dataset","changePage","pageBtn","pagesQuantity","ceil","n"],"mappings":"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","file":"all.min.js","sourcesContent":["const resultsLoc = document.querySelector(\".results\");\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\nconst countriesLoc = document.querySelector(\".countries\");\r\nconst citiesLoc = document.querySelector(\".cities\");\r\n\r\nconst sliderOne = document.getElementById(\"slider-1\");\r\nconst sliderTwo = document.getElementById(\"slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".salary .slider-track\");\r\nconst pauseLoc = document.querySelector(\".salary .pause\");\r\n\r\nconst recNumLoc = document.querySelector(\".records-number\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\r\n    \".salary .slider-container .container\"\r\n);\r\nconst salaryValuesLoc = document.querySelector(\".salary .slider-values\");\r\nconst salaryMinDotLoc = document.querySelector(\"#slider-1\");\r\nconst salaryMaxDotLoc = document.querySelector(\"#slider-2\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst clearFilterLoc = document.querySelectorAll(\".lists .clear-list\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\n\r\nconst dropDownFilterLoc = document.querySelector(\".drop-down-filters\");\r\nconst dropDownLoc = document.querySelector(\".drop-down-btn\");\r\nconst dropDownBtnLoc = document.querySelector(\".drop-down-btn img\");\r\nconst moreFiltersLoc = document.querySelector(\".more-filters\");\r\nconst lessFiltersLoc = document.querySelector(\".less-filters\");\r\n\r\nconst locationMarkLoc = document.querySelector(\"#localization\");\r\nconst locationSliderLoc = document.querySelector(\r\n    \".distance-slider .slider-container .container\"\r\n);\r\nconst locationDotLoc = document.querySelector(\"#loc-slider\");\r\nconst locationValuesLoc = document.querySelector(\r\n    \".distance-slider .slider-values\"\r\n);\r\nconst displayValThree = document.getElementById(\"range3\");\r\n\r\nconst recordsOnPageLoc = document.querySelectorAll(\".recordsOnPage span\");\r\n\r\nconst pagesContainerLoc = document.querySelector(\".pages-container\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nlet apiPage = 1;\r\nlet recordsOnPage = 20;\r\nlet apiDataLength = 0;\r\nlet i = 1;\r\nlet k = recordsOnPage;\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet filterCountriesList = {};\r\n\r\nlet recordsNumber = 0;\r\n\r\nlet isEmpty = true;\r\n\r\nlet filterObj = {};\r\n\r\nlet filterListMaxHeight = 0;\r\n\r\nlet allowSetPages = true;\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsalaryMinDotLoc.disabled = true;\r\nsalaryMaxDotLoc.disabled = true;\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        salaryMinDotLoc.disabled = false;\r\n        salaryMaxDotLoc.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        salaryMinDotLoc.disabled = true;\r\n        salaryMaxDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\nconst getAPI = (apiPage) => {\r\n    return new Promise((resolve) => {\r\n        resolve(\r\n            fetch(\r\n                \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n                {\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"X-Request-Page-Size\": \"100\",\r\n                        \"X-Request-Current-Page\": apiPage,\r\n                        \"X-Request-Sort\":\r\n                            '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n                    },\r\n                }\r\n            )\r\n        );\r\n    });\r\n};\r\n\r\nconst getAPIJSON = (apiData) => {\r\n    return new Promise((resolve) => {\r\n        resolve(apiData.json());\r\n    });\r\n};\r\n\r\nconst getAPIJSONLen = (apiDataJSON) => {\r\n    return new Promise((resolve) => {\r\n        resolve({ apiArray: apiDataJSON, apiArrayLen: apiDataJSON.length });\r\n    });\r\n};\r\n\r\nconst getAPIPage = (apiPage, filterObj) => {\r\n    getAPI(apiPage)\r\n        .then((apiData) => {\r\n            return getAPIJSON(apiData);\r\n        })\r\n\r\n        .then((apiDataJSON) => {\r\n            return getAPIJSONLen(apiDataJSON);\r\n        })\r\n\r\n        .then((fetchObj) => {\r\n            apiDataLength = fetchObj.apiArrayLen;\r\n            if (apiDataLength > 0) {\r\n                if (apiPage === 1) {\r\n                    resultsLoc.replaceChildren();\r\n                    recordsNumber = 0;\r\n                }\r\n                showDataInHtml(fetchObj.apiArray, filterObj);\r\n            } else {\r\n                if (isEmpty) {\r\n                    filterHTML(\r\n                        filterBranchesList,\r\n                        filterJobFormList,\r\n                        filterJobTypeList,\r\n                        filterLangList,\r\n                        filterMinSalary,\r\n                        filterMaxSalary\r\n                    );\r\n                }\r\n                recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n                if (!recordsNumber) {\r\n                    noResultsLoc.classList.add(\"active\");\r\n                } else {\r\n                    noResultsLoc.classList.remove(\"active\");\r\n                }\r\n\r\n                setPages(recordsNumber);\r\n\r\n                function compare(a, b) {\r\n                    return a.city.localeCompare(b.city);\r\n                }\r\n\r\n                for (let key in filterCountriesList) {\r\n                    filterCountriesList[key].sort(compare);\r\n                }\r\n            }\r\n        });\r\n};\r\n\r\ngetAPIPage(apiPage, filterObj);\r\n\r\ni = 1;\r\n\r\nconst showDataInHtml = (apiData, filterObj) => {\r\n    isEmpty = Object.keys(filterObj).length === 0;\r\n\r\n    let parsedJobLocation;\r\n\r\n    apiData.forEach(function (el) {\r\n        // convert specific location structure\r\n\r\n        console.log(\"All \" + i);\r\n        console.log(\"All \" + k);\r\n\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        if (isEmpty) {\r\n            // branches filter create (1 - create Array) ///////////////////////////////////////////////////////    1\r\n\r\n            if (\r\n                filterBranchesList.findIndex(\r\n                    (arr_el) => arr_el === el.options.branches\r\n                ) === -1\r\n            ) {\r\n                filterBranchesList.push(el.options.branches);\r\n            }\r\n\r\n            // job form filter create\r\n            if (el.options._forma_zatrudnienia) {\r\n                el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                    if (\r\n                        filterJobFormList.findIndex(\r\n                            (arr_el) => arr_el === elem\r\n                        ) === -1\r\n                    ) {\r\n                        filterJobFormList.push(elem);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // job type filter create\r\n            if (\r\n                filterJobTypeList.findIndex(\r\n                    (arr_el) => arr_el === el.options.job_type\r\n                ) === -1\r\n            ) {\r\n                filterJobTypeList.push(el.options.job_type);\r\n            }\r\n\r\n            // lang filter create\r\n            if (\r\n                filterLangList.findIndex(\r\n                    (arr_el) => arr_el === el.advert.language\r\n                ) === -1\r\n            ) {\r\n                filterLangList.push(el.advert.language);\r\n            }\r\n\r\n            // salary filter create\r\n            if (parseInt(el.options._Widoczna_stawka)) {\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_od) <\r\n                    filterMinSalary\r\n                ) {\r\n                    filterMinSalary = el.options._spodziewane_wynagrodzenie_od;\r\n                }\r\n\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_do) >\r\n                    filterMaxSalary\r\n                ) {\r\n                    filterMaxSalary = el.options._spodziewane_wynagrodzenie_do;\r\n                }\r\n            }\r\n\r\n            // countries & cities create\r\n            if (filterCountriesList[parsedJobLocation.country]) {\r\n                if (\r\n                    filterCountriesList[parsedJobLocation.country].findIndex(\r\n                        (arr_el) => arr_el.city === parsedJobLocation.locality\r\n                    ) === -1\r\n                ) {\r\n                    filterCountriesList[parsedJobLocation.country].push({\r\n                        city: parsedJobLocation.locality,\r\n                        lati: parseFloat(parsedJobLocation.latitude),\r\n                        longi: parseFloat(parsedJobLocation.longitude),\r\n                    });\r\n                }\r\n            } else {\r\n                filterCountriesList[parsedJobLocation.country] = [];\r\n                filterCountriesList[parsedJobLocation.country].push({\r\n                    city: parsedJobLocation.locality,\r\n                    lati: parseFloat(parsedJobLocation.latitude),\r\n                    longi: parseFloat(parsedJobLocation.longitude),\r\n                });\r\n            }\r\n        } else {\r\n            // branches filter apply (4 - download only selected data) /////////////////////////////////////////////////////  4\r\n            if (filterObj.branchesFiltr.length) {\r\n                if (\r\n                    filterObj.branchesFiltr.indexOf(el.options.branches) === -1\r\n                ) {\r\n                    if (filterObj.branchesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // jobForm filter apply\r\n            if (filterObj.jobFormsFiltr.length) {\r\n                let selectedJobFormsFiltr = false;\r\n\r\n                if (el.options._forma_zatrudnienia) {\r\n                    el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                        if (filterObj.jobFormsFiltr.length) {\r\n                            if (filterObj.jobFormsFiltr.indexOf(elem) !== -1) {\r\n                                selectedJobFormsFiltr = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!selectedJobFormsFiltr) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // jobType filter apply\r\n            if (filterObj.jobTypesFiltr.length) {\r\n                if (\r\n                    filterObj.jobTypesFiltr.indexOf(el.options.job_type) === -1\r\n                ) {\r\n                    if (filterObj.jobTypesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // lang filter apply\r\n            if (filterObj.langsFiltr.length) {\r\n                if (filterObj.langsFiltr.indexOf(el.advert.language) === -1) {\r\n                    if (filterObj.langsFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // remote filter apply\r\n            if (filterObj.remoteFiltr) {\r\n                if (!el.options.remote) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // relocation filter apply\r\n            if (filterObj.relocationFiltr) {\r\n                if (!el.options._relokacja) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // salary filter apply\r\n            if (filterObj.salary[0] || filterObj.salary[1]) {\r\n                if (el.options._Widoczna_stawka == 1) {\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        !el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        !el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // search text apply\r\n            if (filterObj.searchText) {\r\n                let foundWord = false;\r\n                let position = -1;\r\n                el.advert.values.forEach(function (elem) {\r\n                    if (elem.value && elem.field_id !== \"geolocation\") {\r\n                        position = elem.value\r\n                            .toLowerCase()\r\n                            .search(filterObj.searchText.toLowerCase());\r\n                        if (position !== -1) {\r\n                            foundWord = true;\r\n                        }\r\n                    }\r\n                });\r\n                position = el.advert.name\r\n                    .toLowerCase()\r\n                    .search(filterObj.searchText.toLowerCase());\r\n                if (position !== -1) {\r\n                    foundWord = true;\r\n                }\r\n                if (!foundWord) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // countries filtr apply\r\n            if (filterObj.countriesFiltr[0]) {\r\n                if (\r\n                    filterObj.countriesFiltr.indexOf(\r\n                        parsedJobLocation.country\r\n                    ) === -1\r\n                ) {\r\n                    if (parsedJobLocation.country) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // cities filtr apply\r\n            if (filterObj.citiesFiltr[0]) {\r\n                if (\r\n                    filterObj.citiesFiltr.indexOf(\r\n                        parsedJobLocation.locality\r\n                    ) === -1\r\n                ) {\r\n                    if (parsedJobLocation.locality) {\r\n                        // distance filtr apply\r\n\r\n                        if (citiesLoc.value) {\r\n                            let lati = parseFloat(parsedJobLocation.latitude);\r\n                            let longi = parseFloat(parsedJobLocation.longitude);\r\n                            let km = filterObj.distanceFiltr;\r\n\r\n                            let min_lati = filterObj.latiFiltr - km * 0.009044;\r\n                            let max_lati = filterObj.latiFiltr + km * 0.009044;\r\n                            let min_longi =\r\n                                filterObj.longiFiltr -\r\n                                (km * 0.0089831) /\r\n                                    Math.cos(\r\n                                        (filterObj.latiFiltr * Math.PI) / 180\r\n                                    );\r\n                            let max_longi =\r\n                                filterObj.longiFiltr +\r\n                                (km * 0.0089831) /\r\n                                    Math.cos(\r\n                                        (filterObj.latiFiltr * Math.PI) / 180\r\n                                    );\r\n                            if (\r\n                                lati > max_lati ||\r\n                                lati < min_lati ||\r\n                                longi > max_longi ||\r\n                                longi < min_longi\r\n                            ) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // records number counting\r\n        recordsNumber++;\r\n\r\n        // colouring of records by type of recruitment\r\n\r\n        let borderColorClass = \"\";\r\n        let textColorClass = \"\";\r\n\r\n        if (el.options._rekrutacja_rodzaj === \"PT\") {\r\n            borderColorClass = \"pt-border\";\r\n            textColorClass = \"pt-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"RS\") {\r\n            borderColorClass = \"rs-border\";\r\n            textColorClass = \"rs-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"WEW\") {\r\n            borderColorClass = \"wew-border\";\r\n            textColorClass = \"wew-text\";\r\n        }\r\n\r\n        // creating HTML code for record\r\n\r\n        let formaZatrudnienia = \"\";\r\n\r\n        if (el.options._forma_zatrudnienia) {\r\n            el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n            });\r\n        }\r\n\r\n        if (i <= k) {\r\n            console.log(\"In cond \" + i);\r\n            console.log(\"In cond \" + k);\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${\r\n                    el.url\r\n                }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                    <div class=\"top-left\">\r\n                        <div class=\"lang\"><p>${el.advert.language}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                el.options.branches ? el.options.branches : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                    el.advert.name\r\n                }</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"top-right\">\r\n                        ${\r\n                            el.options.job_type\r\n                                ? \"<div class='jobtype'>\" +\r\n                                  el.options.job_type +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._Widoczna_stawka\r\n                                ? el.options._spodziewane_wynagrodzenie_od &&\r\n                                  el.options._spodziewane_wynagrodzenie_do\r\n                                    ? \"<div class='salary'>\" +\r\n                                      el.options._spodziewane_wynagrodzenie_od +\r\n                                      \" - \" +\r\n                                      el.options._spodziewane_wynagrodzenie_do +\r\n                                      \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"bottom-left\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            parsedJobLocation.locality\r\n                        }</div>\r\n                        ${\r\n                            el.options.remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._relokacja\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                        <div class=\"bottom-right\">\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n            );\r\n\r\n            // console.log(i);\r\n        }\r\n        i++;\r\n    });\r\n\r\n    // download next 100 records from API\r\n    getAPIPage(++apiPage, filterObj);\r\n};\r\n\r\n// fullfill filters lists\r\nconst filterHTML = () => {\r\n    // fullfill branches filters list (2 - fullfill lists in HTML) ///////////////////////////////////////////////////////   2\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n    // fullfill jobforms filters list\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n    // fullfill jobtypes filters list\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobTypeList.length * 21 + 3;\r\n        jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n    // fullfill langs filters list\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterLangList.length * 21 + 3;\r\n        langLoc.style.height = String(rowHeight) + \"px\";\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n    // fullfill countries filters list\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        // sort keys (countries) in object\r\n        const filterCountriesListSorted = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n        countriesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n        );\r\n\r\n        let newAllCitiesObj = [];\r\n        for (let klucz in filterCountriesListSorted) {\r\n            countriesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${klucz}\">${klucz}</option>`\r\n            );\r\n\r\n            newAllCitiesObj = newAllCitiesObj.concat(\r\n                filterCountriesListSorted[klucz]\r\n            );\r\n        }\r\n\r\n        let newAllCitiesArray = [];\r\n        newAllCitiesObj.forEach((el) => {\r\n            newAllCitiesArray.push(el.city);\r\n        });\r\n\r\n        newAllCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        citiesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n        );\r\n\r\n        newAllCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\" class=\"active\">${el} </option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    Object.keys(filterObj).length === 0;\r\n\r\n    sliderOne.value = filterMinSalary;\r\n    sliderTwo.value = filterMaxSalary;\r\n    sliderOne.min = filterMinSalary;\r\n    sliderTwo.min = filterMinSalary;\r\n    sliderOne.max = filterMaxSalary;\r\n    sliderTwo.max = filterMaxSalary;\r\n    slideOne();\r\n    slideTwo();\r\n};\r\n\r\n// double range slider\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    if (displayValOne.textContent === \"100000\") {\r\n        salaryMarkLoc.disabled = true;\r\n        displayValOne.textContent = \"\";\r\n        displayValTwo.textContent = \"\";\r\n        pauseLoc.textContent = \"\";\r\n    }\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nslideOne();\r\nslideTwo();\r\n\r\nconst getFilteredData = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    const citiesChildrenLoc = document.querySelectorAll(\".cities option\");\r\n\r\n    // create filter Object (3 - put selected options to Object) ///////////////////////////////////////////////////////   3\r\n\r\n    // i = 1;\r\n    // k = recordsOnPage;\r\n\r\n    filterObj = {};\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedLang = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedCountry = [];\r\n    if (locationMarkLoc.checked) {\r\n        selectedCountry = Array.from(countriesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let selectedCity = [];\r\n    if (locationMarkLoc.checked) {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let selectedLati;\r\n    let selectedLongi;\r\n    if (selectedCity[0]) {\r\n        selectedLati = filterCountriesList[selectedCountry[0]].find(\r\n            (el) => el.city === selectedCity[0]\r\n        ).lati;\r\n\r\n        selectedLongi = filterCountriesList[selectedCountry[0]].find(\r\n            (el) => el.city === selectedCity[0]\r\n        ).longi;\r\n    }\r\n\r\n    let selectedDistance = 0;\r\n    if (locationMarkLoc.checked) {\r\n        selectedDistance = parseInt(locationDotLoc.value);\r\n    }\r\n\r\n    let selectedRemote = remoteLoc.checked;\r\n    let selectedRelocation = relocationLoc.checked;\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = displayValOne.innerText;\r\n        selectedValTwo = displayValTwo.innerText;\r\n    }\r\n\r\n    filterObj.branchesFiltr = selectedBranches;\r\n    filterObj.jobFormsFiltr = selectedJobForms;\r\n    filterObj.jobTypesFiltr = selectedJobTypes;\r\n    filterObj.langsFiltr = selectedLang;\r\n    filterObj.remoteFiltr = selectedRemote;\r\n    filterObj.relocationFiltr = selectedRelocation;\r\n    filterObj.salary = [selectedValOne, selectedValTwo];\r\n    filterObj.searchText = searchInputLoc.value;\r\n    filterObj.countriesFiltr = selectedCountry;\r\n    filterObj.citiesFiltr = selectedCity;\r\n    filterObj.distanceFiltr = selectedDistance;\r\n    filterObj.latiFiltr = selectedLati;\r\n    filterObj.longiFiltr = selectedLongi;\r\n\r\n    // reset initialvalue\r\n    apiPage = 1;\r\n    apiDataLength = 0;\r\n    recordsNumber = 0;\r\n    getAPIPage(apiPage, filterObj);\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", getFilteredData);\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n\r\nclearFilterLoc.forEach((elemFiltr) => {\r\n    elemFiltr.addEventListener(\"click\", () => {\r\n        let optArray =\r\n            elemFiltr.previousElementSibling.querySelectorAll(\"option\");\r\n        optArray.forEach((elOpt) => {\r\n            if (elOpt.selected) {\r\n                elOpt.selected = false;\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\ndropDownLoc.addEventListener(\"click\", () => {\r\n    dropDownBtnLoc.classList.toggle(\"up\");\r\n    if (dropDownFilterLoc.classList.contains(\"show\")) {\r\n        dropDownFilterLoc.classList.remove(\"show\");\r\n        dropDownFilterLoc.style.maxHeight = String(0) + \"px\";\r\n        moreFiltersLoc.classList.remove(\"hide\");\r\n        lessFiltersLoc.classList.remove(\"show\");\r\n    } else {\r\n        dropDownFilterLoc.classList.add(\"show\");\r\n        dropDownFilterLoc.style.maxHeight =\r\n            String(filterListMaxHeight + 200) + \"px\";\r\n        moreFiltersLoc.classList.add(\"hide\");\r\n        lessFiltersLoc.classList.add(\"show\");\r\n    }\r\n});\r\n\r\nlocationMarkLoc.checked = false;\r\nlocationDotLoc.disabled = true;\r\ncountriesLoc.disabled = true;\r\ncitiesLoc.disabled = true;\r\n\r\nlocationMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        if (citiesLoc.value) {\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n\r\n        countriesLoc.disabled = false;\r\n        citiesLoc.disabled = false;\r\n    } else {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n\r\n        countriesLoc.disabled = true;\r\n        citiesLoc.disabled = true;\r\n    }\r\n});\r\n\r\nfunction slideThree() {\r\n    displayValThree.textContent = locationDotLoc.value;\r\n}\r\n\r\nlocationDotLoc.value = 0;\r\n\r\nconst activateCities = () => {\r\n    citiesLoc.querySelectorAll(\"option\").forEach((el) => {\r\n        if (countriesLoc.value) {\r\n            if (\r\n                filterCountriesList[countriesLoc.value].findIndex(\r\n                    (sel_el) => sel_el.city === el.value\r\n                ) !== -1\r\n            ) {\r\n                el.classList.add(\"active\");\r\n            } else {\r\n                el.classList.remove(\"active\");\r\n            }\r\n        } else {\r\n            el.classList.add(\"active\");\r\n        }\r\n    });\r\n};\r\n\r\ncountriesLoc.addEventListener(\"change\", function () {\r\n    activateCities();\r\n\r\n    if (countriesLoc.value) {\r\n        if (\r\n            filterCountriesList[countriesLoc.value].find(\r\n                (el) => el.city !== citiesLoc.value\r\n            )\r\n        ) {\r\n            citiesLoc.value = filterCountriesList[countriesLoc.value][0].city;\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n    } else {\r\n        citiesLoc.value = citiesLoc[0].value;\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\ncitiesLoc.addEventListener(\"change\", function () {\r\n    Object.keys(filterCountriesList).find((key) => {\r\n        if (\r\n            filterCountriesList[key].findIndex(\r\n                (sel_el) => sel_el.city === citiesLoc.value\r\n            ) !== -1\r\n        ) {\r\n            if (countriesLoc.value !== key) {\r\n                countriesLoc.value = key;\r\n                activateCities();\r\n            }\r\n        }\r\n    });\r\n    if (!citiesLoc.value) {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    } else {\r\n        locationSliderLoc.classList.remove(\"unactive\");\r\n        locationValuesLoc.classList.remove(\"unactive\");\r\n        locationDotLoc.disabled = false;\r\n    }\r\n});\r\n\r\nrecordsOnPageLoc.forEach((el) => {\r\n    el.addEventListener(\"click\", (e) => {\r\n        recordsOnPageLoc.forEach((elem) => {\r\n            elem.classList.remove(\"active\");\r\n        });\r\n        document\r\n            .querySelector(`[data-value='${e.target.dataset.value}']`)\r\n            .classList.add(\"active\");\r\n\r\n        recordsOnPage = parseInt(e.target.dataset.value);\r\n        allowSetPages = true;\r\n        i = 1;\r\n        getFilteredData();\r\n    });\r\n});\r\n\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    // console.log(parseInt(pageBtn.innerText));\r\n    // console.log(recordsNumber);\r\n    // console.log(recordsOnPage);\r\n    // console.log(\"TEST\");\r\n    i = recordsOnPage * (parseInt(pageBtn.innerText) - 1) + 1;\r\n    k = recordsOnPage * (parseInt(pageBtn.innerText) - 1) + recordsOnPage;\r\n    // console.log(i);\r\n    // console.log(k);\r\n    allowSetPages = false;\r\n\r\n    getFilteredData();\r\n};\r\n\r\nconst setPages = (recordsNumber) => {\r\n    if (allowSetPages) {\r\n        const pagesQuantity = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n        pagesContainerLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= pagesQuantity; n++) {\r\n            if (n === 1) {\r\n                pagesContainerLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesContainerLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", () => {\r\n                changePage(el);\r\n            });\r\n        });\r\n    }\r\n};\r\n"]}