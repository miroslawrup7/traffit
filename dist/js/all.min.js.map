{"version":3,"sources":["main.js"],"names":["recNumLoc","document","querySelector","noResultsLoc","resultsLoc","pagesContainer","pagesSwitchLoc","pageButtonsLoc","querySelectorAll","dropDownFilterLoc","dropDownLoc","dropDownBtnLoc","moreFiltersLoc","lessFiltersLoc","recordsOnPageLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","countriesLoc","citiesLoc","locationMarkLoc","locationDotLoc","locationSliderLoc","locationValuesLoc","displayValDistance","getElementById","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","sliderOne","sliderTwo","displayValOne","displayValTwo","sliderTrack","pauseLoc","remoteLoc","relocationLoc","searchInputLoc","searchBtn","clearFiltersLoc","clearFilterLoc","apiPage","rawAPIArray","allRecordsArray","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterMinSalary","filterMaxSalary","filterCountriesList","recordsNumber","firstRecordNumber","recordsOnPage","filterListMaxHeight","filtersON","filteredRecordsArray_10","value","checked","disabled","createDataForFilters","branche","jobForm","jobType","lang","visibleRate","salaryFrom","salaryTo","country","city","lati","longi","indexOf","undefined","push","forEach","elem","findIndex","arr_el","reworkData","el","options","job_location","parsedJobLocation","JSON","parse","url","name","advert","branches","language","job_type","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","remote","relocation","_relokacja","recruitmentType","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","description","values","summariseDownload","innerText","classList","remove","add","dropDownBtnStart","addEventListener","toggle","contains","style","maxHeight","String","pagesContainerStart","createRecordBoxes","recordsArray","replaceChildren","i","borderColorClass","textColorClass","formaZatrudnienia","insertAdjacentHTML","getAPI","fetch","mode","headers","loopOnAPI","jsonData","length","concat","createRecordsObjFromAPI","setPages","createFilterLists","async","rawData","json","sort","a","b","localeCompare","rowHeight","height","Object","keys","compare","key","reduce","accumulator","allCitiesObj","allCitiesArray","min","toString","max","slideOne","slideTwo","createFilteredRecordsArray","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","Array","from","filter","selected","map","filteredRecordsArray_1","index","addFlag","selectedFiltr","selectedJobForms","filteredRecordsArray_2","selectedjobTypes","filteredRecordsArray_3","selectedValOne","selectedValTwo","selectedLangs","filteredRecordsArray_4","filteredRecordsArray_5","selectedCountry","filteredRecordsArray_6","selectedCity","filteredRecordsArray_7","min_lati","max_lati","min_longi","max_longi","selectedDistance","Math","cos","PI","filteredRecordsArray_8","filteredRecordsArray_9","searchText","position","field_id","toLowerCase","search","slideDistance","textContent","e","target","activateCities","sel_el","find","minGap","zIndex","fillColor","percent1","percent2","background","changePage","pageBtn","firstRecord","lastRecord","pagesQuantity","ceil","n","clearFilters","window","location","reload","elemFiltr","nextElementSibling","elOpt"],"mappings":"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","file":"all.min.js","sourcesContent":["const recNumLoc = document.querySelector(\".records-number\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\nconst pagesContainer = document.querySelector(\".pages-container\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nconst dropDownFilterLoc = document.querySelector(\".drop-down-filters\");\r\nconst dropDownLoc = document.querySelector(\".drop-down-btn\");\r\nconst dropDownBtnLoc = document.querySelector(\".drop-down-btn img\");\r\nconst moreFiltersLoc = document.querySelector(\".more-filters\");\r\nconst lessFiltersLoc = document.querySelector(\".less-filters\");\r\n\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\n\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\nconst countriesLoc = document.querySelector(\".countries\");\r\nconst citiesLoc = document.querySelector(\".cities\");\r\n\r\nconst locationMarkLoc = document.querySelector(\"#localization\");\r\nconst locationDotLoc = document.querySelector(\"#loc-slider\");\r\nconst locationSliderLoc = document.querySelector(\r\n    \".distance-slider .slider-container .container\"\r\n);\r\nconst locationValuesLoc = document.querySelector(\r\n    \".distance-slider .slider-values\"\r\n);\r\nconst displayValDistance = document.getElementById(\"range3\");\r\n\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\r\n    \".salary .slider-container .container\"\r\n);\r\nconst salaryValuesLoc = document.querySelector(\".salary .slider-values\");\r\nconst sliderOne = document.querySelector(\"#slider-1\");\r\nconst sliderTwo = document.querySelector(\"#slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".salary .slider-track\");\r\nconst pauseLoc = document.querySelector(\".salary .pause\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst clearFilterLoc = document.querySelectorAll(\".lists .list .clear-list\");\r\n\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet filterCountriesList = {};\r\n\r\nlet recordsNumber = 0;\r\nlet firstRecordNumber = 0;\r\nlet recordsOnPage = 20;\r\n\r\nlet filterListMaxHeight = 0;\r\n\r\nlet filtersON = false;\r\nlet filteredRecordsArray_10 = [];\r\n\r\nsearchInputLoc.value = \"\";\r\n\r\nlocationMarkLoc.checked = false;\r\nlocationDotLoc.disabled = true;\r\ncountriesLoc.disabled = true;\r\ncitiesLoc.disabled = true;\r\nlocationDotLoc.value = 0;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsliderOne.disabled = true;\r\nsliderTwo.disabled = true;\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        filterBranchesList.push(branche);\r\n    }\r\n    if (jobForm) {\r\n        jobForm.forEach(function (elem) {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType);\r\n    }\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n        filterLangList.push(lang);\r\n    }\r\n    if (visibleRate) {\r\n        if (salaryFrom < filterMinSalary) {\r\n            filterMinSalary = salaryFrom;\r\n        }\r\n        if (salaryTo > filterMaxSalary) {\r\n            filterMaxSalary = salaryTo;\r\n        }\r\n    }\r\n    if (filterCountriesList[country]) {\r\n        if (\r\n            filterCountriesList[country].findIndex(\r\n                (arr_el) => arr_el.city === city\r\n            ) === -1\r\n        ) {\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    } else {\r\n        filterCountriesList[country] = [];\r\n        filterCountriesList[country].push({\r\n            city: city,\r\n            lati: lati,\r\n            longi: longi,\r\n        });\r\n    }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\n\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// show & hide MORE FILTERS //////////////////////////////////////////////////\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", () => {\r\n        dropDownBtnLoc.classList.toggle(\"up\");\r\n        if (dropDownFilterLoc.classList.contains(\"show\")) {\r\n            dropDownFilterLoc.classList.remove(\"show\");\r\n            dropDownFilterLoc.style.maxHeight = String(0) + \"px\";\r\n            moreFiltersLoc.classList.remove(\"hide\");\r\n            lessFiltersLoc.classList.remove(\"show\");\r\n        } else {\r\n            dropDownFilterLoc.classList.add(\"show\");\r\n            dropDownFilterLoc.style.maxHeight =\r\n                String(filterListMaxHeight + 200) + \"px\";\r\n            moreFiltersLoc.classList.add(\"hide\");\r\n            lessFiltersLoc.classList.add(\"show\");\r\n        }\r\n    });\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\n\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n\r\n            if (recordsArray[i].recruitmentType === \"PT\") {\r\n                borderColorClass = \"pt-border\";\r\n                textColorClass = \"pt-text\";\r\n            }\r\n            if (recordsArray[i].recruitmentType === \"RS\") {\r\n                borderColorClass = \"rs-border\";\r\n                textColorClass = \"rs-text\";\r\n            }\r\n            if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                borderColorClass = \"wew-border\";\r\n                textColorClass = \"wew-text\";\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia =\r\n                        formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${\r\n                    recordsArray[i].url\r\n                }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n            <div class=\"top\">\r\n                <div class=\"top-left\">\r\n                    <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                    <div class=\"branche-name\">\r\n                        <div class=\"branche\">${\r\n                            recordsArray[i].branche\r\n                                ? recordsArray[i].branche\r\n                                : \"\"\r\n                        }</div>\r\n                        <div class=\"name ${textColorClass}\">${\r\n                    recordsArray[i].name\r\n                }</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"top-right\">\r\n                    ${\r\n                        recordsArray[i].jobType\r\n                            ? \"<div class='jobtype'>\" +\r\n                              recordsArray[i].jobType +\r\n                              \"</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].visibleRate\r\n                            ? recordsArray[i].salaryFrom &&\r\n                              recordsArray[i].salaryTo\r\n                                ? \"<div class='salary'>\" +\r\n                                  recordsArray[i].salaryFrom +\r\n                                  \" - \" +\r\n                                  recordsArray[i].salaryTo +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                            : \"\"\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"bottom\">\r\n                <div class=\"bottom-left\">\r\n                    <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                        recordsArray[i].city\r\n                    }</div>\r\n                    ${\r\n                        recordsArray[i].remote\r\n                            ? \"<div class='remote'>zdalna</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].relocation\r\n                            ? \"<div class='relocation'>relocation</div>\"\r\n                            : \"\"\r\n                    }\r\n                </div>\r\n                    <div class=\"bottom-right\">\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div></a>`\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\n\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData) => {\r\n    if (jsonData.length > 0) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        createRecordsObjFromAPI(apiPage);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        recordsNumber = rawAPIArray.length;\r\n        summariseDownload(recordsNumber);\r\n        createRecordBoxes(allRecordsArray, firstRecordNumber, recordsOnPage);\r\n        setPages(recordsNumber);\r\n        createFilterLists();\r\n        dropDownBtnStart();\r\n        pagesContainerStart();\r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage) {\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData);\r\n}\r\n\r\ncreateRecordsObjFromAPI(apiPage);\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\n\r\nconst createFilterLists = () => {\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobTypeList.length * 21 + 3;\r\n        jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterLangList.length * 21 + 3;\r\n        langLoc.style.height = String(rowHeight) + \"px\";\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        countriesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n        );\r\n\r\n        citiesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n        );\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            countriesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${key}\">${key}</option>`\r\n            );\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\" class=\"active\">${el} </option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    sliderOne.min = filterMinSalary.toString();\r\n    sliderTwo.min = filterMinSalary.toString();\r\n    sliderOne.max = filterMaxSalary.toString();\r\n    sliderTwo.max = filterMaxSalary.toString();\r\n    sliderOne.value = filterMinSalary.toString();\r\n    sliderTwo.value = filterMaxSalary.toString();\r\n    slideOne();\r\n    slideTwo();\r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\n\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    const citiesChildrenLoc = document.querySelectorAll(\".cities option\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    // selectedJobTypes////////////////\r\n\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n\r\n    let selectedLangs = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    }\r\n\r\n    // selectedSalary ////////////////\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = parseInt(displayValOne.innerText);\r\n        selectedValTwo = parseInt(displayValTwo.innerText);\r\n    }\r\n\r\n    let filteredRecordsArray_5 = [];\r\n\r\n    if (salaryMarkLoc.checked) {\r\n        filteredRecordsArray_4.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.visibleRate) {\r\n                if (el.salaryTo && el.salaryFrom) {\r\n                    if (\r\n                        el.salaryTo >= selectedValOne &&\r\n                        el.salaryFrom <= selectedValTwo\r\n                    ) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (el.salaryTo && !el.salaryFrom) {\r\n                    if (el.salaryTo >= selectedValOne) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (!el.salaryTo && el.salaryFrom) {\r\n                    if (el.salaryFrom <= selectedValTwo) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    }\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        selectedCountry = Array.from(countriesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.selected;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_6 = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        if (selectedCountry.length) {\r\n            filteredRecordsArray_5.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                selectedCountry.forEach((selectedFiltr) => {\r\n                    if (el.country === selectedFiltr) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_6.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_6 = filteredRecordsArray_5;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    }\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    let selectedCity = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.selected;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_7 = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        if (selectedCity.length) {\r\n            let selectedDistance = 0;\r\n\r\n            selectedDistance = parseInt(locationDotLoc.value);\r\n\r\n            let lati;\r\n            let longi;\r\n            let min_lati;\r\n            let max_lati;\r\n            let min_longi;\r\n            let max_longi;\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                if (el.city === selectedCity[0]) {\r\n                    lati = el.lati;\r\n                    longi = el.longi;\r\n\r\n                    min_lati = lati - selectedDistance * 0.009044;\r\n                    max_lati = lati + selectedDistance * 0.009044;\r\n                    min_longi =\r\n                        longi -\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                    max_longi =\r\n                        longi +\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                }\r\n            });\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                if (\r\n                    el.lati <= max_lati &&\r\n                    el.lati >= min_lati &&\r\n                    el.longi <= max_longi &&\r\n                    el.longi >= min_longi\r\n                ) {\r\n                    addFlag = true;\r\n                }\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_7.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_7 = filteredRecordsArray_6;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    }\r\n\r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n    if (remoteLoc.checked) {\r\n        filteredRecordsArray_7.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.remote) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_8.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    }\r\n\r\n    // selectedRelocation ////////////////\r\n\r\n    let filteredRecordsArray_9 = [];\r\n\r\n    if (relocationLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.relocation) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    filteredRecordsArray_10 = [];\r\n\r\n    let searchText = searchInputLoc.value;\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            let position;\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n            if (position !== -1) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    }\r\n\r\n    // recordsArray = filteredRecordsArray_10;\r\n    recordsNumber = filteredRecordsArray_10.length;\r\n    summariseDownload(recordsNumber);\r\n    createRecordBoxes(filteredRecordsArray_10, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\r\n\r\n// COUNTRY & CITY LISTENER /////////////////////////////////////////////////////////////\r\n\r\nlocationMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        if (citiesLoc.value) {\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n\r\n        countriesLoc.disabled = false;\r\n        citiesLoc.disabled = false;\r\n    } else {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n\r\n        countriesLoc.disabled = true;\r\n        citiesLoc.disabled = true;\r\n    }\r\n});\r\n\r\nfunction slideDistance() {\r\n    displayValDistance.textContent = locationDotLoc.value;\r\n}\r\n\r\nconst activateCities = () => {\r\n    citiesLoc.querySelectorAll(\"option\").forEach((el) => {\r\n        if (countriesLoc.value) {\r\n            if (\r\n                filterCountriesList[countriesLoc.value].findIndex(\r\n                    (sel_el) => sel_el.city === el.value\r\n                ) !== -1\r\n            ) {\r\n                el.classList.add(\"active\");\r\n            } else {\r\n                el.classList.remove(\"active\");\r\n            }\r\n        } else {\r\n            el.classList.add(\"active\");\r\n        }\r\n    });\r\n};\r\n\r\ncountriesLoc.addEventListener(\"change\", function () {\r\n    activateCities();\r\n\r\n    if (countriesLoc.value) {\r\n        if (\r\n            filterCountriesList[countriesLoc.value].find(\r\n                (el) => el.city !== citiesLoc.value\r\n            )\r\n        ) {\r\n            citiesLoc.value = filterCountriesList[countriesLoc.value][0].city;\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n    } else {\r\n        citiesLoc.value = citiesLoc[0].value;\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\ncitiesLoc.addEventListener(\"change\", function () {\r\n    Object.keys(filterCountriesList).find((key) => {\r\n        if (\r\n            filterCountriesList[key].findIndex(\r\n                (sel_el) => sel_el.city === citiesLoc.value\r\n            ) !== -1\r\n        ) {\r\n            if (countriesLoc.value !== key) {\r\n                countriesLoc.value = key;\r\n                activateCities();\r\n            }\r\n        }\r\n    });\r\n    if (!citiesLoc.value) {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    } else {\r\n        locationSliderLoc.classList.remove(\"unactive\");\r\n        locationValuesLoc.classList.remove(\"unactive\");\r\n        locationDotLoc.disabled = false;\r\n    }\r\n});\r\n\r\n// SALARY LISTENER ////////////////////////////////////////////////////////////////////\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n\r\n    if (sliderOne.value === sliderTwo.value) {\r\n        sliderOne.style.zIndex = \"1\";\r\n    } else {\r\n        sliderOne.style.zIndex = \"0\";\r\n    }\r\n\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    if (displayValTwo.textContent === \"100000\") {\r\n        salaryMarkLoc.disabled = true;\r\n        displayValOne.textContent = \"\";\r\n        displayValTwo.textContent = \"\";\r\n        pauseLoc.textContent = \"\";\r\n    }\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nsliderOne.value = filterMaxSalary.toString();\r\nsliderTwo.value = filterMinSalary.toString();\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        sliderOne.disabled = false;\r\n        sliderTwo.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        sliderOne.disabled = true;\r\n        sliderTwo.disabled = true;\r\n    }\r\n});\r\n\r\n// set & change PAGE //////////////////////////////////////////////////////////\r\n\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_10, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n};\r\n\r\nconst setPages = (recordsNumber) => {\r\n    let pagesQuantity = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    pagesSwitchLoc.replaceChildren();\r\n\r\n    for (n = 1; n <= pagesQuantity; n++) {\r\n        if (n === 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"page active\">${n}</div>`\r\n            );\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"page\">${n}</div>`\r\n            );\r\n        }\r\n    }\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\n\r\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\r\n    recordsOnPage = parseInt(e.target.value);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_10, 0, recordsOnPage)\r\n        : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n});\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n\r\nclearFilterLoc.forEach((elemFiltr) => {\r\n    elemFiltr.addEventListener(\"click\", () => {\r\n        let optArray = elemFiltr.nextElementSibling.querySelectorAll(\"option\");\r\n        optArray.forEach((elOpt) => {\r\n            if (elOpt.selected) {\r\n                elOpt.selected = false;\r\n            }\r\n        });\r\n    });\r\n});\r\n"]}