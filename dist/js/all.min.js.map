{"version":3,"sources":["main.js"],"names":["recNumLoc","document","querySelector","noResultsLoc","resultsLoc","pagesSwitchLoc","pageButtonsLoc","querySelectorAll","dropDownFilterLoc","dropDownLoc","dropDownBtnLoc","moreFiltersLoc","lessFiltersLoc","recordsOnPageLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","countriesLoc","citiesLoc","locationMarkLoc","locationDotLoc","locationSliderLoc","locationValuesLoc","displayValDistance","getElementById","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","sliderOne","sliderTwo","displayValOne","displayValTwo","sliderTrack","pauseLoc","remoteLoc","relocationLoc","searchInputLoc","searchBtn","pagesContainerLoc","clearFiltersLoc","clearFilterLoc","apiPage","rawAPIArray","allRecordsArray","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterMinSalary","filterMaxSalary","filterCountriesList","recordsNumber","firstRecordNumber","recordsOnPage","filterListMaxHeight","filtersON","filteredRecordsArray_10","value","checked","disabled","createDataForFilters","branche","jobForm","jobType","lang","visibleRate","salaryFrom","salaryTo","country","city","lati","longi","indexOf","undefined","push","forEach","elem","findIndex","arr_el","reworkData","el","options","job_location","parsedJobLocation","JSON","parse","url","name","advert","branches","language","job_type","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","remote","relocation","_relokacja","recruitmentType","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","description","values","summariseDownload","innerText","classList","remove","add","dropDownBtnStart","addEventListener","toggle","contains","style","maxHeight","String","createRecordBoxes","recordsArray","replaceChildren","i","borderColorClass","textColorClass","formaZatrudnienia","insertAdjacentHTML","getAPI","fetch","mode","headers","loopOnAPI","jsonData","length","concat","createRecordsObjFromAPI","setPages","createFilterLists","async","rawData","json","sort","a","b","localeCompare","rowHeight","height","Object","keys","compare","key","reduce","accumulator","allCitiesObj","allCitiesArray","min","toString","max","slideOne","slideTwo","createFilteredRecordsArray","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","Array","from","filter","selected","map","filteredRecordsArray_1","index","addFlag","selectedFiltr","selectedJobForms","filteredRecordsArray_2","selectedjobTypes","filteredRecordsArray_3","selectedValOne","selectedValTwo","selectedLangs","filteredRecordsArray_4","filteredRecordsArray_5","selectedCountry","filteredRecordsArray_6","selectedCity","filteredRecordsArray_7","min_lati","max_lati","min_longi","max_longi","selectedDistance","Math","cos","PI","filteredRecordsArray_8","filteredRecordsArray_9","searchText","position","field_id","toLowerCase","search","slideDistance","textContent","e","target","activateCities","sel_el","find","minGap","zIndex","fillColor","percent1","percent2","background","changePage","pageBtn","firstRecord","lastRecord","pagesQuantity","ceil","n","dataset","clearFilters","window","location","reload","elemFiltr","nextElementSibling","elOpt"],"mappings":"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","file":"all.min.js","sourcesContent":["const recNumLoc = document.querySelector(\".records-number\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages-container\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nconst dropDownFilterLoc = document.querySelector(\".drop-down-filters\");\r\nconst dropDownLoc = document.querySelector(\".drop-down-btn\");\r\nconst dropDownBtnLoc = document.querySelector(\".drop-down-btn img\");\r\nconst moreFiltersLoc = document.querySelector(\".more-filters\");\r\nconst lessFiltersLoc = document.querySelector(\".less-filters\");\r\n\r\nconst recordsOnPageLoc = document.querySelectorAll(\".recordsOnPage span\");\r\n\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\nconst countriesLoc = document.querySelector(\".countries\");\r\nconst citiesLoc = document.querySelector(\".cities\");\r\n\r\nconst locationMarkLoc = document.querySelector(\"#localization\");\r\nconst locationDotLoc = document.querySelector(\"#loc-slider\");\r\nconst locationSliderLoc = document.querySelector(\r\n    \".distance-slider .slider-container .container\"\r\n);\r\nconst locationValuesLoc = document.querySelector(\r\n    \".distance-slider .slider-values\"\r\n);\r\nconst displayValDistance = document.getElementById(\"range3\");\r\n\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\r\n    \".salary .slider-container .container\"\r\n);\r\nconst salaryValuesLoc = document.querySelector(\".salary .slider-values\");\r\nconst sliderOne = document.querySelector(\"#slider-1\");\r\nconst sliderTwo = document.querySelector(\"#slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".salary .slider-track\");\r\nconst pauseLoc = document.querySelector(\".salary .pause\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst pagesContainerLoc = document.querySelector(\".pages-container\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst clearFilterLoc = document.querySelectorAll(\".lists .list .clear-list\");\r\n\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet filterCountriesList = {};\r\n\r\nlet recordsNumber = 0;\r\nlet firstRecordNumber = 0;\r\nlet recordsOnPage = 20;\r\n\r\nlet filterListMaxHeight = 0;\r\n\r\nlet filtersON = false;\r\nlet filteredRecordsArray_10 = [];\r\n\r\nsearchInputLoc.value = \"\";\r\n\r\nlocationMarkLoc.checked = false;\r\nlocationDotLoc.disabled = true;\r\ncountriesLoc.disabled = true;\r\ncitiesLoc.disabled = true;\r\nlocationDotLoc.value = 0;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsliderOne.disabled = true;\r\nsliderTwo.disabled = true;\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        filterBranchesList.push(branche);\r\n    }\r\n    if (jobForm) {\r\n        jobForm.forEach(function (elem) {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType);\r\n    }\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n        filterLangList.push(lang);\r\n    }\r\n    if (visibleRate) {\r\n        if (salaryFrom < filterMinSalary) {\r\n            filterMinSalary = salaryFrom;\r\n        }\r\n        if (salaryTo > filterMaxSalary) {\r\n            filterMaxSalary = salaryTo;\r\n        }\r\n    }\r\n    if (filterCountriesList[country]) {\r\n        if (\r\n            filterCountriesList[country].findIndex(\r\n                (arr_el) => arr_el.city === city\r\n            ) === -1\r\n        ) {\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    } else {\r\n        filterCountriesList[country] = [];\r\n        filterCountriesList[country].push({\r\n            city: city,\r\n            lati: lati,\r\n            longi: longi,\r\n        });\r\n    }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\n\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// show & hide MORE FILTERS //////////////////////////////////////////////////\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", () => {\r\n        dropDownBtnLoc.classList.toggle(\"up\");\r\n        if (dropDownFilterLoc.classList.contains(\"show\")) {\r\n            dropDownFilterLoc.classList.remove(\"show\");\r\n            dropDownFilterLoc.style.maxHeight = String(0) + \"px\";\r\n            moreFiltersLoc.classList.remove(\"hide\");\r\n            lessFiltersLoc.classList.remove(\"show\");\r\n        } else {\r\n            dropDownFilterLoc.classList.add(\"show\");\r\n            dropDownFilterLoc.style.maxHeight =\r\n                String(filterListMaxHeight + 200) + \"px\";\r\n            moreFiltersLoc.classList.add(\"hide\");\r\n            lessFiltersLoc.classList.add(\"show\");\r\n        }\r\n    });\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\n\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n\r\n            if (recordsArray[i].recruitmentType === \"PT\") {\r\n                borderColorClass = \"pt-border\";\r\n                textColorClass = \"pt-text\";\r\n            }\r\n            if (recordsArray[i].recruitmentType === \"RS\") {\r\n                borderColorClass = \"rs-border\";\r\n                textColorClass = \"rs-text\";\r\n            }\r\n            if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                borderColorClass = \"wew-border\";\r\n                textColorClass = \"wew-text\";\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia =\r\n                        formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${\r\n                    recordsArray[i].url\r\n                }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n            <div class=\"top\">\r\n                <div class=\"top-left\">\r\n                    <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                    <div class=\"branche-name\">\r\n                        <div class=\"branche\">${\r\n                            recordsArray[i].branche\r\n                                ? recordsArray[i].branche\r\n                                : \"\"\r\n                        }</div>\r\n                        <div class=\"name ${textColorClass}\">${\r\n                    recordsArray[i].name\r\n                }</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"top-right\">\r\n                    ${\r\n                        recordsArray[i].jobType\r\n                            ? \"<div class='jobtype'>\" +\r\n                              recordsArray[i].jobType +\r\n                              \"</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].visibleRate\r\n                            ? recordsArray[i].salaryFrom &&\r\n                              recordsArray[i].salaryTo\r\n                                ? \"<div class='salary'>\" +\r\n                                  recordsArray[i].salaryFrom +\r\n                                  \" - \" +\r\n                                  recordsArray[i].salaryTo +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                            : \"\"\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"bottom\">\r\n                <div class=\"bottom-left\">\r\n                    <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                        recordsArray[i].city\r\n                    }</div>\r\n                    ${\r\n                        recordsArray[i].remote\r\n                            ? \"<div class='remote'>zdalna</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].relocation\r\n                            ? \"<div class='relocation'>relocation</div>\"\r\n                            : \"\"\r\n                    }\r\n                </div>\r\n                    <div class=\"bottom-right\">\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div></a>`\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\n\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData) => {\r\n    if (jsonData.length > 0) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        createRecordsObjFromAPI(apiPage);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        recordsNumber = rawAPIArray.length;\r\n        summariseDownload(recordsNumber);\r\n        createRecordBoxes(allRecordsArray, firstRecordNumber, recordsOnPage);\r\n        setPages(recordsNumber);\r\n        createFilterLists();\r\n        dropDownBtnStart();\r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage) {\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData);\r\n}\r\n\r\ncreateRecordsObjFromAPI(apiPage);\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\n\r\nconst createFilterLists = () => {\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobTypeList.length * 21 + 3;\r\n        jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterLangList.length * 21 + 3;\r\n        langLoc.style.height = String(rowHeight) + \"px\";\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\">${el}</option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        countriesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n        );\r\n\r\n        citiesLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n        );\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            countriesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${key}\">${key}</option>`\r\n            );\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"${el}\" class=\"active\">${el} </option>`\r\n            );\r\n        });\r\n    }\r\n\r\n    sliderOne.min = filterMinSalary.toString();\r\n    sliderTwo.min = filterMinSalary.toString();\r\n    sliderOne.max = filterMaxSalary.toString();\r\n    sliderTwo.max = filterMaxSalary.toString();\r\n    sliderOne.value = filterMinSalary.toString();\r\n    sliderTwo.value = filterMaxSalary.toString();\r\n    slideOne();\r\n    slideTwo();\r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\n\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    const citiesChildrenLoc = document.querySelectorAll(\".cities option\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    // selectedJobTypes////////////////\r\n\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n\r\n    let selectedLangs = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    }\r\n\r\n    // selectedSalary ////////////////\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = parseInt(displayValOne.innerText);\r\n        selectedValTwo = parseInt(displayValTwo.innerText);\r\n    }\r\n\r\n    let filteredRecordsArray_5 = [];\r\n\r\n    if (salaryMarkLoc.checked) {\r\n        filteredRecordsArray_4.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.visibleRate) {\r\n                if (el.salaryTo && el.salaryFrom) {\r\n                    if (\r\n                        el.salaryTo >= selectedValOne &&\r\n                        el.salaryFrom <= selectedValTwo\r\n                    ) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (el.salaryTo && !el.salaryFrom) {\r\n                    if (el.salaryTo >= selectedValOne) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (!el.salaryTo && el.salaryFrom) {\r\n                    if (el.salaryFrom <= selectedValTwo) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    }\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        selectedCountry = Array.from(countriesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.selected;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_6 = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        if (selectedCountry.length) {\r\n            filteredRecordsArray_5.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                selectedCountry.forEach((selectedFiltr) => {\r\n                    if (el.country === selectedFiltr) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_6.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_6 = filteredRecordsArray_5;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    }\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    let selectedCity = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.selected;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_7 = [];\r\n\r\n    if (locationMarkLoc.checked) {\r\n        if (selectedCity.length) {\r\n            let selectedDistance = 0;\r\n\r\n            selectedDistance = parseInt(locationDotLoc.value);\r\n\r\n            let lati;\r\n            let longi;\r\n            let min_lati;\r\n            let max_lati;\r\n            let min_longi;\r\n            let max_longi;\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                if (el.city === selectedCity[0]) {\r\n                    lati = el.lati;\r\n                    longi = el.longi;\r\n\r\n                    min_lati = lati - selectedDistance * 0.009044;\r\n                    max_lati = lati + selectedDistance * 0.009044;\r\n                    min_longi =\r\n                        longi -\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                    max_longi =\r\n                        longi +\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                }\r\n            });\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                if (\r\n                    el.lati <= max_lati &&\r\n                    el.lati >= min_lati &&\r\n                    el.longi <= max_longi &&\r\n                    el.longi >= min_longi\r\n                ) {\r\n                    addFlag = true;\r\n                }\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_7.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_7 = filteredRecordsArray_6;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    }\r\n\r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n    if (remoteLoc.checked) {\r\n        filteredRecordsArray_7.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.remote) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_8.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    }\r\n\r\n    // selectedRelocation ////////////////\r\n\r\n    let filteredRecordsArray_9 = [];\r\n\r\n    if (relocationLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.relocation) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    filteredRecordsArray_10 = [];\r\n\r\n    let searchText = searchInputLoc.value;\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            let position;\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n            if (position !== -1) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    }\r\n\r\n    // recordsArray = filteredRecordsArray_10;\r\n    recordsNumber = filteredRecordsArray_10.length;\r\n    summariseDownload(recordsNumber);\r\n    createRecordBoxes(filteredRecordsArray_10, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\r\n\r\n// COUNTRY & CITY LISTENER /////////////////////////////////////////////////////////////\r\n\r\nlocationMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        if (citiesLoc.value) {\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n\r\n        countriesLoc.disabled = false;\r\n        citiesLoc.disabled = false;\r\n    } else {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n\r\n        countriesLoc.disabled = true;\r\n        citiesLoc.disabled = true;\r\n    }\r\n});\r\n\r\nfunction slideDistance() {\r\n    displayValDistance.textContent = locationDotLoc.value;\r\n}\r\n\r\nconst activateCities = () => {\r\n    citiesLoc.querySelectorAll(\"option\").forEach((el) => {\r\n        if (countriesLoc.value) {\r\n            if (\r\n                filterCountriesList[countriesLoc.value].findIndex(\r\n                    (sel_el) => sel_el.city === el.value\r\n                ) !== -1\r\n            ) {\r\n                el.classList.add(\"active\");\r\n            } else {\r\n                el.classList.remove(\"active\");\r\n            }\r\n        } else {\r\n            el.classList.add(\"active\");\r\n        }\r\n    });\r\n};\r\n\r\ncountriesLoc.addEventListener(\"change\", function () {\r\n    activateCities();\r\n\r\n    if (countriesLoc.value) {\r\n        if (\r\n            filterCountriesList[countriesLoc.value].find(\r\n                (el) => el.city !== citiesLoc.value\r\n            )\r\n        ) {\r\n            citiesLoc.value = filterCountriesList[countriesLoc.value][0].city;\r\n            locationSliderLoc.classList.remove(\"unactive\");\r\n            locationValuesLoc.classList.remove(\"unactive\");\r\n            locationDotLoc.disabled = false;\r\n        }\r\n    } else {\r\n        citiesLoc.value = citiesLoc[0].value;\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\ncitiesLoc.addEventListener(\"change\", function () {\r\n    Object.keys(filterCountriesList).find((key) => {\r\n        if (\r\n            filterCountriesList[key].findIndex(\r\n                (sel_el) => sel_el.city === citiesLoc.value\r\n            ) !== -1\r\n        ) {\r\n            if (countriesLoc.value !== key) {\r\n                countriesLoc.value = key;\r\n                activateCities();\r\n            }\r\n        }\r\n    });\r\n    if (!citiesLoc.value) {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n    } else {\r\n        locationSliderLoc.classList.remove(\"unactive\");\r\n        locationValuesLoc.classList.remove(\"unactive\");\r\n        locationDotLoc.disabled = false;\r\n    }\r\n});\r\n\r\n// SALARY LISTENER ////////////////////////////////////////////////////////////////////\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n\r\n    if (sliderOne.value === sliderTwo.value) {\r\n        sliderOne.style.zIndex = \"1\";\r\n    } else {\r\n        sliderOne.style.zIndex = \"0\";\r\n    }\r\n\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    if (displayValTwo.textContent === \"100000\") {\r\n        salaryMarkLoc.disabled = true;\r\n        displayValOne.textContent = \"\";\r\n        displayValTwo.textContent = \"\";\r\n        pauseLoc.textContent = \"\";\r\n    }\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nsliderOne.value = filterMaxSalary.toString();\r\nsliderTwo.value = filterMinSalary.toString();\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        sliderOne.disabled = false;\r\n        sliderTwo.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        sliderOne.disabled = true;\r\n        sliderTwo.disabled = true;\r\n    }\r\n});\r\n\r\n// set & change PAGE //////////////////////////////////////////////////////////\r\n\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_10, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n};\r\n\r\nconst setPages = (recordsNumber) => {\r\n    let pagesQuantity = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    pagesSwitchLoc.replaceChildren();\r\n\r\n    for (n = 1; n <= pagesQuantity; n++) {\r\n        if (n === 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"page active\">${n}</div>`\r\n            );\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<div class=\"page\">${n}</div>`\r\n            );\r\n        }\r\n    }\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\n\r\nrecordsOnPageLoc.forEach((el) => {\r\n    el.addEventListener(\"click\", (e) => {\r\n        recordsOnPageLoc.forEach((elem) => {\r\n            elem.classList.remove(\"active\");\r\n        });\r\n        document\r\n            .querySelector(`[data-value='${e.target.dataset.value}']`)\r\n            .classList.add(\"active\");\r\n\r\n        recordsOnPage = parseInt(e.target.dataset.value);\r\n\r\n        filtersON\r\n            ? createRecordBoxes(filteredRecordsArray_10, 0, recordsOnPage)\r\n            : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n        setPages(recordsNumber);\r\n    });\r\n});\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n\r\nclearFilterLoc.forEach((elemFiltr) => {\r\n    elemFiltr.addEventListener(\"click\", () => {\r\n        let optArray = elemFiltr.nextElementSibling.querySelectorAll(\"option\");\r\n        optArray.forEach((elOpt) => {\r\n            if (elOpt.selected) {\r\n                elOpt.selected = false;\r\n            }\r\n        });\r\n    });\r\n});\r\n"]}