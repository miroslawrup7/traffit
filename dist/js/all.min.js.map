{"version":3,"sources":["main.js"],"names":["resultsLoc","document","querySelector","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","countriesLoc","citiesLoc","sliderOne","getElementById","sliderTwo","displayValOne","displayValTwo","sliderTrack","recNumLoc","searchBtn","remoteLoc","relocationLoc","salaryMarkLoc","salarySliderLoc","salaryValuesLoc","salaryMinDotLoc","salaryMaxDotLoc","searchInputLoc","clearFiltersLoc","clearFilterLoc","querySelectorAll","noResultsLoc","dropDownFilterLoc","dropDownLoc","dropDownBtnLoc","moreFiltersLoc","lessFiltersLoc","locationMarkLoc","locationSliderLoc","locationDotLoc","locationValuesLoc","displayValThree","apiPage","apiDataLength","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterMinSalary","filterMaxSalary","filterCountriesList","recordsNumber","isEmpty","filterObj","filterListMaxHeight","checked","disabled","addEventListener","e","target","classList","remove","add","getAPI","Promise","resolve","fetch","mode","headers","getAPIJSON","apiData","json","getAPIJSONLen","apiDataJSON","apiArray","apiArrayLen","length","getAPIPage","then","fetchObj","replaceChildren","showDataInHtml","filterHTML","innerText","key","sort","a","b","localeCompare","parsedJobLocation","Object","keys","forEach","el","options","job_location","JSON","parse","findIndex","arr_el","branches","push","_forma_zatrudnienia","elem","job_type","advert","language","parseInt","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","country","locality","branchesFiltr","indexOf","jobFormsFiltr","selectedJobFormsFiltr","jobTypesFiltr","langsFiltr","remoteFiltr","remote","relocationFiltr","_relokacja","salary","searchText","foundWord","position","values","value","field_id","toLowerCase","search","name","countriesFiltr","borderColorClass","textColorClass","_rekrutacja_rodzaj","formaZatrudnienia","insertAdjacentHTML","url","rowHeight","style","height","String","filterCountriesListSorted","reduce","accumulator","newAllCitiesArray","klucz","concat","min","max","slideOne","slideTwo","minGap","textContent","fillColor","percent1","percent2","background","getFilteredData","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","selectedBranches","Array","from","filter","selected","map","selectedJobForms","selectedJobTypes","selectedLang","selectedCountry","selectedValOne","selectedValTwo","selectedRemote","selectedRelocation","clearFilters","window","location","reload","slideThree","elemFiltr","previousElementSibling","elOpt","toggle","contains","maxHeight","sel_el"],"mappings":"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","file":"all.min.js","sourcesContent":["const resultsLoc = document.querySelector(\".results\");\r\nconst branchesLoc = document.querySelector(\".branches\");\r\nconst jobFormLoc = document.querySelector(\".job-form\");\r\nconst jobTypeLoc = document.querySelector(\".job-type\");\r\nconst langLoc = document.querySelector(\".lang\");\r\nconst countriesLoc = document.querySelector(\".countries\");\r\nconst citiesLoc = document.querySelector(\".cities\");\r\n\r\nconst sliderOne = document.getElementById(\"slider-1\");\r\nconst sliderTwo = document.getElementById(\"slider-2\");\r\nconst displayValOne = document.getElementById(\"range1\");\r\nconst displayValTwo = document.getElementById(\"range2\");\r\nconst sliderTrack = document.querySelector(\".salary .slider-track\");\r\n\r\nconst recNumLoc = document.querySelector(\".records-number\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\nconst salaryMarkLoc = document.querySelector(\"#salary-mark\");\r\nconst salarySliderLoc = document.querySelector(\r\n    \".salary .slider-container .container\"\r\n);\r\nconst salaryValuesLoc = document.querySelector(\".salary .slider-values\");\r\nconst salaryMinDotLoc = document.querySelector(\"#slider-1\");\r\nconst salaryMaxDotLoc = document.querySelector(\"#slider-2\");\r\n\r\nconst searchInputLoc = document.querySelector(\".search-input input\");\r\n\r\nconst clearFiltersLoc = document.querySelector(\".clear-filters\");\r\nconst clearFilterLoc = document.querySelectorAll(\".lists .clear-list\");\r\nconst noResultsLoc = document.querySelector(\".no-results\");\r\n\r\nconst dropDownFilterLoc = document.querySelector(\".drop-down-filters\");\r\nconst dropDownLoc = document.querySelector(\".drop-down-btn\");\r\nconst dropDownBtnLoc = document.querySelector(\".drop-down-btn img\");\r\nconst moreFiltersLoc = document.querySelector(\".more-filters\");\r\nconst lessFiltersLoc = document.querySelector(\".less-filters\");\r\n\r\nconst locationMarkLoc = document.querySelector(\"#localization\");\r\nconst locationSliderLoc = document.querySelector(\r\n    \".distance-slider .slider-container .container\"\r\n);\r\nconst locationDotLoc = document.querySelector(\"#loc-slider\");\r\nconst locationValuesLoc = document.querySelector(\r\n    \".distance-slider .slider-values\"\r\n);\r\nconst displayValThree = document.getElementById(\"range3\");\r\n\r\nlet apiPage = 1;\r\nlet apiDataLength = 0;\r\n\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterMinSalary = 100000;\r\nlet filterMaxSalary = 0;\r\nlet filterCountriesList = {};\r\n\r\nlet recordsNumber = 0;\r\n\r\nlet isEmpty = true;\r\n\r\nlet filterObj = {};\r\n\r\nlet filterListMaxHeight = 0;\r\n\r\nremoteLoc.checked = false;\r\nrelocationLoc.checked = false;\r\n\r\nsalaryMarkLoc.checked = false;\r\nsalaryMinDotLoc.disabled = true;\r\nsalaryMaxDotLoc.disabled = true;\r\n\r\nsalaryMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        salarySliderLoc.classList.remove(\"unactive\");\r\n        salaryValuesLoc.classList.remove(\"unactive\");\r\n        salaryMinDotLoc.disabled = false;\r\n        salaryMaxDotLoc.disabled = false;\r\n    } else {\r\n        salarySliderLoc.classList.add(\"unactive\");\r\n        salaryValuesLoc.classList.add(\"unactive\");\r\n        salaryMinDotLoc.disabled = true;\r\n        salaryMaxDotLoc.disabled = true;\r\n    }\r\n});\r\n\r\nconst getAPI = (apiPage) => {\r\n    return new Promise((resolve) => {\r\n        resolve(\r\n            fetch(\r\n                \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n                {\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"X-Request-Page-Size\": \"100\",\r\n                        \"X-Request-Current-Page\": apiPage,\r\n                        \"X-Request-Sort\":\r\n                            '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n                    },\r\n                }\r\n            )\r\n        );\r\n    });\r\n};\r\n\r\nconst getAPIJSON = (apiData) => {\r\n    return new Promise((resolve) => {\r\n        resolve(apiData.json());\r\n    });\r\n};\r\n\r\nconst getAPIJSONLen = (apiDataJSON) => {\r\n    return new Promise((resolve) => {\r\n        resolve({ apiArray: apiDataJSON, apiArrayLen: apiDataJSON.length });\r\n    });\r\n};\r\n\r\nconst getAPIPage = (apiPage, filterObj) => {\r\n    getAPI(apiPage)\r\n        .then((apiData) => {\r\n            return getAPIJSON(apiData);\r\n        })\r\n\r\n        .then((apiDataJSON) => {\r\n            return getAPIJSONLen(apiDataJSON);\r\n        })\r\n\r\n        .then((fetchObj) => {\r\n            apiDataLength = fetchObj.apiArrayLen;\r\n            if (apiDataLength > 0) {\r\n                if (apiPage === 1) {\r\n                    resultsLoc.replaceChildren();\r\n                    recordsNumber = 0;\r\n                }\r\n\r\n                showDataInHtml(fetchObj.apiArray, filterObj);\r\n            } else {\r\n                if (isEmpty) {\r\n                    filterHTML(\r\n                        filterBranchesList,\r\n                        filterJobFormList,\r\n                        filterJobTypeList,\r\n                        filterLangList,\r\n                        filterMinSalary,\r\n                        filterMaxSalary\r\n                    );\r\n                }\r\n                recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n                if (!recordsNumber) {\r\n                    noResultsLoc.classList.add(\"active\");\r\n                } else {\r\n                    noResultsLoc.classList.remove(\"active\");\r\n                }\r\n\r\n                for (let key in filterCountriesList) {\r\n                    filterCountriesList[key].sort(function (a, b) {\r\n                        return a.localeCompare(b);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n};\r\n\r\ngetAPIPage(apiPage, filterObj);\r\n\r\nconst showDataInHtml = (apiData, filterObj) => {\r\n    isEmpty = Object.keys(filterObj).length === 0;\r\n\r\n    let parsedJobLocation;\r\n\r\n    apiData.forEach(function (el) {\r\n        // convert specific location structure\r\n\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        if (isEmpty) {\r\n            // branches filter create (1 - create Array) ///////////////////////////////////////////////////////    1\r\n\r\n            if (\r\n                filterBranchesList.findIndex(\r\n                    (arr_el) => arr_el === el.options.branches\r\n                ) === -1\r\n            ) {\r\n                filterBranchesList.push(el.options.branches);\r\n            }\r\n\r\n            // job form filter create\r\n            if (el.options._forma_zatrudnienia) {\r\n                el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                    if (\r\n                        filterJobFormList.findIndex(\r\n                            (arr_el) => arr_el === elem\r\n                        ) === -1\r\n                    ) {\r\n                        filterJobFormList.push(elem);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // job type filter create\r\n            if (\r\n                filterJobTypeList.findIndex(\r\n                    (arr_el) => arr_el === el.options.job_type\r\n                ) === -1\r\n            ) {\r\n                filterJobTypeList.push(el.options.job_type);\r\n            }\r\n\r\n            // lang filter create\r\n            if (\r\n                filterLangList.findIndex(\r\n                    (arr_el) => arr_el === el.advert.language\r\n                ) === -1\r\n            ) {\r\n                filterLangList.push(el.advert.language);\r\n            }\r\n\r\n            // salary filter create\r\n            if (parseInt(el.options._Widoczna_stawka)) {\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_od) <\r\n                    filterMinSalary\r\n                ) {\r\n                    filterMinSalary = el.options._spodziewane_wynagrodzenie_od;\r\n                }\r\n\r\n                if (\r\n                    parseInt(el.options._spodziewane_wynagrodzenie_do) >\r\n                    filterMaxSalary\r\n                ) {\r\n                    filterMaxSalary = el.options._spodziewane_wynagrodzenie_do;\r\n                }\r\n            }\r\n\r\n            // countries & cities create\r\n\r\n            if (filterCountriesList[parsedJobLocation.country]) {\r\n                if (\r\n                    filterCountriesList[parsedJobLocation.country].findIndex(\r\n                        (arr_el) => arr_el === parsedJobLocation.locality\r\n                    ) === -1\r\n                ) {\r\n                    filterCountriesList[parsedJobLocation.country].push(\r\n                        parsedJobLocation.locality\r\n                    );\r\n                }\r\n            } else {\r\n                filterCountriesList[parsedJobLocation.country] = [];\r\n                filterCountriesList[parsedJobLocation.country].push(\r\n                    parsedJobLocation.locality\r\n                );\r\n            }\r\n        } else {\r\n            // branches filter apply (4 - download only selected data) /////////////////////////////////////////////////////  4\r\n            if (filterObj.branchesFiltr.length) {\r\n                if (\r\n                    filterObj.branchesFiltr.indexOf(el.options.branches) === -1\r\n                ) {\r\n                    if (filterObj.branchesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // jobForm filter apply\r\n            if (filterObj.jobFormsFiltr.length) {\r\n                let selectedJobFormsFiltr = false;\r\n\r\n                if (el.options._forma_zatrudnienia) {\r\n                    el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                        if (filterObj.jobFormsFiltr.length) {\r\n                            if (filterObj.jobFormsFiltr.indexOf(elem) !== -1) {\r\n                                selectedJobFormsFiltr = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!selectedJobFormsFiltr) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // jobType filter apply\r\n            if (filterObj.jobTypesFiltr.length) {\r\n                if (\r\n                    filterObj.jobTypesFiltr.indexOf(el.options.job_type) === -1\r\n                ) {\r\n                    if (filterObj.jobTypesFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // lang filter apply\r\n            if (filterObj.langsFiltr.length) {\r\n                if (filterObj.langsFiltr.indexOf(el.advert.language) === -1) {\r\n                    if (filterObj.langsFiltr.length) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // remote filter apply\r\n            if (filterObj.remoteFiltr) {\r\n                if (!el.options.remote) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // relocation filter apply\r\n            if (filterObj.relocationFiltr) {\r\n                if (!el.options._relokacja) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // salary filter apply\r\n            if (filterObj.salary[0] || filterObj.salary[1]) {\r\n                if (el.options._Widoczna_stawka == 1) {\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        el.options._spodziewane_wynagrodzenie_od &&\r\n                        !el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] <\r\n                                el.options._spodziewane_wynagrodzenie_od &&\r\n                            filterObj.salary[1] <\r\n                                el.options._spodziewane_wynagrodzenie_od\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        !el.options._spodziewane_wynagrodzenie_od &&\r\n                        el.options._spodziewane_wynagrodzenie_do\r\n                    ) {\r\n                        if (\r\n                            filterObj.salary[0] >\r\n                                el.options._spodziewane_wynagrodzenie_do &&\r\n                            filterObj.salary[1] >\r\n                                el.options._spodziewane_wynagrodzenie_do\r\n                        ) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // search text apply\r\n            if (filterObj.searchText) {\r\n                let foundWord = false;\r\n                let position = -1;\r\n                el.advert.values.forEach(function (elem) {\r\n                    if (elem.value && elem.field_id !== \"geolocation\") {\r\n                        position = elem.value\r\n                            .toLowerCase()\r\n                            .search(filterObj.searchText.toLowerCase());\r\n                        if (position !== -1) {\r\n                            foundWord = true;\r\n                        }\r\n                    }\r\n                });\r\n                position = el.advert.name\r\n                    .toLowerCase()\r\n                    .search(filterObj.searchText.toLowerCase());\r\n                if (position !== -1) {\r\n                    foundWord = true;\r\n                }\r\n                if (!foundWord) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // countries filtr apply\r\n            if (filterObj.countriesFiltr.length) {\r\n                if (\r\n                    filterObj.countriesFiltr.indexOf(\r\n                        parsedJobLocation.country\r\n                    ) === -1\r\n                ) {\r\n                    if (parsedJobLocation.country) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // records number counting\r\n        recordsNumber++;\r\n\r\n        // colouring of records by type of recruitment\r\n\r\n        let borderColorClass = \"\";\r\n        let textColorClass = \"\";\r\n\r\n        if (el.options._rekrutacja_rodzaj === \"PT\") {\r\n            borderColorClass = \"pt-border\";\r\n            textColorClass = \"pt-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"RS\") {\r\n            borderColorClass = \"rs-border\";\r\n            textColorClass = \"rs-text\";\r\n        }\r\n        if (el.options._rekrutacja_rodzaj === \"WEW\") {\r\n            borderColorClass = \"wew-border\";\r\n            textColorClass = \"wew-text\";\r\n        }\r\n\r\n        // creating HTML code for record\r\n\r\n        let formaZatrudnienia = \"\";\r\n\r\n        if (el.options._forma_zatrudnienia) {\r\n            el.options._forma_zatrudnienia.forEach(function (elem) {\r\n                formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n            });\r\n        }\r\n\r\n        resultsLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<a href=\"${\r\n                el.url\r\n            }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                    <div class=\"top-left\">\r\n                        <div class=\"lang\"><p>${el.advert.language}</p></div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                el.options.branches ? el.options.branches : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                el.advert.name\r\n            }</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"top-right\">\r\n                        ${\r\n                            el.options.job_type\r\n                                ? \"<div class='jobtype'>\" +\r\n                                  el.options.job_type +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._Widoczna_stawka\r\n                                ? el.options._spodziewane_wynagrodzenie_od &&\r\n                                  el.options._spodziewane_wynagrodzenie_do\r\n                                    ? \"<div class='salary'>\" +\r\n                                      el.options._spodziewane_wynagrodzenie_od +\r\n                                      \" - \" +\r\n                                      el.options._spodziewane_wynagrodzenie_do +\r\n                                      \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"bottom-left\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            parsedJobLocation.locality\r\n                        }</div>\r\n                        ${\r\n                            el.options.remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            el.options._relokacja\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                        <div class=\"bottom-right\">\r\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n        );\r\n    });\r\n\r\n    // download next 100 rekords from API\r\n    getAPIPage(++apiPage, filterObj);\r\n};\r\n\r\n// fullfill filters lists\r\nconst filterHTML = () =>\r\n    // filterBranchesList,\r\n    // filterJobFormList,\r\n    // filterJobTypeList,\r\n    // filterLangList,\r\n    // filterMinSalary,\r\n    // filterMaxSalary\r\n    {\r\n        // fullfill branches filters list (2 - fullfill lists in HTML) ///////////////////////////////////////////////////////   2\r\n        if (filterBranchesList.length > 0) {\r\n            filterBranchesList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterBranchesList.length * 21 + 3;\r\n            filterListMaxHeight = rowHeight;\r\n            branchesLoc.style.height = String(rowHeight) + \"px\";\r\n            filterBranchesList.forEach(function (el) {\r\n                branchesLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill jobforms filters list\r\n        if (filterJobFormList.length > 0) {\r\n            filterJobFormList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterJobFormList.length * 21 + 3;\r\n            jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n            filterJobFormList.forEach(function (el) {\r\n                jobFormLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill jobtypes filters list\r\n        if (filterJobTypeList.length > 0) {\r\n            filterJobTypeList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterJobTypeList.length * 21 + 3;\r\n            jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n            filterJobTypeList.forEach(function (el) {\r\n                jobTypeLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill langs filters list\r\n        if (filterLangList.length > 0) {\r\n            filterLangList.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            rowHeight = filterLangList.length * 21 + 3;\r\n            langLoc.style.height = String(rowHeight) + \"px\";\r\n            filterLangList.forEach(function (el) {\r\n                langLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\">${el}</option>`\r\n                );\r\n            });\r\n        }\r\n        // fullfill countries filters list\r\n        if (Object.keys(filterCountriesList).length > 0) {\r\n            // sort keys (countries) in object\r\n            const filterCountriesListSorted = Object.keys(filterCountriesList)\r\n                .sort()\r\n                .reduce((accumulator, key) => {\r\n                    accumulator[key] = filterCountriesList[key];\r\n                    return accumulator;\r\n                }, {});\r\n\r\n            countriesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n            );\r\n            let newAllCitiesArray = [];\r\n            for (let klucz in filterCountriesListSorted) {\r\n                countriesLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${klucz}\">${klucz}</option>`\r\n                );\r\n                newAllCitiesArray = newAllCitiesArray.concat(\r\n                    filterCountriesListSorted[klucz]\r\n                );\r\n            }\r\n\r\n            newAllCitiesArray.sort(function (a, b) {\r\n                return a.localeCompare(b);\r\n            });\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n            );\r\n            newAllCitiesArray.forEach(function (el) {\r\n                citiesLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<option value=\"${el}\" class=\"active\">${el} </option>`\r\n                );\r\n            });\r\n        }\r\n\r\n        Object.keys(filterObj).length === 0;\r\n\r\n        sliderOne.value = filterMinSalary;\r\n        sliderTwo.value = filterMaxSalary;\r\n        sliderOne.min = filterMinSalary;\r\n        sliderTwo.min = filterMinSalary;\r\n        sliderOne.max = filterMaxSalary;\r\n        sliderTwo.max = filterMaxSalary;\r\n        slideOne();\r\n        slideTwo();\r\n    };\r\n\r\n// double range slider\r\n\r\nlet minGap = 0;\r\n\r\nfunction slideOne() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderOne.value = parseInt(sliderTwo.value) - minGap;\r\n    }\r\n    displayValOne.textContent = sliderOne.value;\r\n    fillColor();\r\n}\r\n\r\nfunction slideTwo() {\r\n    if (parseInt(sliderTwo.value) - parseInt(sliderOne.value) <= minGap) {\r\n        sliderTwo.value = parseInt(sliderOne.value) + minGap;\r\n    }\r\n    displayValTwo.textContent = sliderTwo.value;\r\n    fillColor();\r\n}\r\n\r\nfunction fillColor() {\r\n    percent1 =\r\n        ((sliderOne.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    percent2 =\r\n        ((sliderTwo.value - sliderOne.min) / (sliderOne.max - sliderOne.min)) *\r\n        100;\r\n    sliderTrack.style.background = `linear-gradient(to right, #dadae5 ${percent1}%, #fe7320ff ${percent1}%, #fe7320ff ${percent2}%, #dadae5 ${percent2}%)`;\r\n}\r\n\r\nslideOne();\r\nslideTwo();\r\n\r\nconst getFilteredData = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n\r\n    // create filter Object (3 - put selected options to Object) ///////////////////////////////////////////////////////   3\r\n\r\n    filterObj = {};\r\n\r\n    let selectedBranches = Array.from(branchesChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedJobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedLang = Array.from(langChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let selectedCountry = [];\r\n    if (locationMarkLoc.checked) {\r\n        selectedCountry = Array.from(countriesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let selectedRemote = remoteLoc.checked;\r\n    let selectedRelocation = relocationLoc.checked;\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = displayValOne.innerText;\r\n        selectedValTwo = displayValTwo.innerText;\r\n    }\r\n\r\n    if (searchInputLoc.value !== \"\") {\r\n    }\r\n\r\n    filterObj.branchesFiltr = selectedBranches;\r\n    filterObj.jobFormsFiltr = selectedJobForms;\r\n    filterObj.jobTypesFiltr = selectedJobTypes;\r\n    filterObj.langsFiltr = selectedLang;\r\n    filterObj.remoteFiltr = selectedRemote;\r\n    filterObj.relocationFiltr = selectedRelocation;\r\n    filterObj.salary = [selectedValOne, selectedValTwo];\r\n    filterObj.searchText = searchInputLoc.value;\r\n    filterObj.countriesFiltr = selectedCountry;\r\n\r\n    // reset initialvalue\r\n    apiPage = 1;\r\n    apiDataLength = 0;\r\n    recordsNumber = 0;\r\n\r\n    getAPIPage(apiPage, filterObj);\r\n};\r\n\r\nsearchBtn.addEventListener(\"click\", getFilteredData);\r\n\r\nconst clearFilters = () => {\r\n    searchInputLoc.value = \"\";\r\n    window.location.reload();\r\n};\r\n\r\nclearFiltersLoc.addEventListener(\"click\", clearFilters);\r\n\r\nclearFilterLoc.forEach((elemFiltr) => {\r\n    elemFiltr.addEventListener(\"click\", () => {\r\n        let optArray =\r\n            elemFiltr.previousElementSibling.querySelectorAll(\"option\");\r\n        optArray.forEach((elOpt) => {\r\n            if (elOpt.selected) {\r\n                elOpt.selected = false;\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\ndropDownLoc.addEventListener(\"click\", () => {\r\n    dropDownBtnLoc.classList.toggle(\"up\");\r\n    if (dropDownFilterLoc.classList.contains(\"show\")) {\r\n        dropDownFilterLoc.classList.remove(\"show\");\r\n        dropDownFilterLoc.style.maxHeight = String(0) + \"px\";\r\n        moreFiltersLoc.classList.remove(\"hide\");\r\n        lessFiltersLoc.classList.remove(\"show\");\r\n    } else {\r\n        dropDownFilterLoc.classList.add(\"show\");\r\n        dropDownFilterLoc.style.maxHeight =\r\n            String(filterListMaxHeight + 200) + \"px\";\r\n        moreFiltersLoc.classList.add(\"hide\");\r\n        lessFiltersLoc.classList.add(\"show\");\r\n    }\r\n});\r\n\r\nlocationMarkLoc.checked = false;\r\nlocationDotLoc.disabled = true;\r\ncountriesLoc.disabled = true;\r\ncitiesLoc.disabled = true;\r\n\r\nlocationMarkLoc.addEventListener(\"change\", function (e) {\r\n    if (e.target.checked) {\r\n        locationSliderLoc.classList.remove(\"unactive\");\r\n        locationValuesLoc.classList.remove(\"unactive\");\r\n        locationDotLoc.disabled = false;\r\n        countriesLoc.disabled = false;\r\n        citiesLoc.disabled = false;\r\n    } else {\r\n        locationSliderLoc.classList.add(\"unactive\");\r\n        locationValuesLoc.classList.add(\"unactive\");\r\n        locationDotLoc.disabled = true;\r\n        countriesLoc.disabled = true;\r\n        citiesLoc.disabled = true;\r\n    }\r\n});\r\n\r\nfunction slideThree() {\r\n    displayValThree.textContent = locationDotLoc.value;\r\n}\r\n\r\nlocationDotLoc.value = 0;\r\n\r\ncountriesLoc.addEventListener(\"change\", function () {\r\n    citiesLoc.querySelectorAll(\"option\").forEach((el) => {\r\n        if (countriesLoc.value) {\r\n            if (\r\n                filterCountriesList[countriesLoc.value].findIndex(\r\n                    (sel_el) => sel_el === el.value\r\n                ) !== -1\r\n            ) {\r\n                el.classList.add(\"active\");\r\n            } else {\r\n                el.classList.remove(\"active\");\r\n            }\r\n        } else {\r\n            el.classList.add(\"active\");\r\n        }\r\n    });\r\n});\r\n"]}